/* -*- mode: C; buffer-read-only: t -*-
 *
 *    lock_definitions.h
 *
 *    Copyright (C) 2023, 2024 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is built by regen/lock_definitions.pl from data in
 * regen/lock_definitions.pl.
 * Any changes made here will be lost!
 */

/* This file contains macros to wrap their respective function calls to ensure
 * that those calls are thread-safe in a multi-threaded environment.
 *
 * Most libc functions are already thread-safe without these wrappers, so do
 * not appear here.  The functions that are known to have multi-thread issues
 * are:
 *
 * addmntent             gethostbyname2      iswlower           setttyent
 * alphasort             gethostbyname2_r    iswlower_l         setusershell
 * asctime               gethostbyname_r     iswprint           setutent
 * asctime_r             gethostent          iswprint_l         setutxent
 * asprintf              gethostent_r        iswpunct           sgetspent
 * atof                  gethostid           iswpunct_l         sgetspent_r
 * atoi                  getlogin            iswspace           shm_open
 * atol                  getlogin_r          iswspace_l         shm_unlink
 * atoll                 getmntent           iswupper           siginterrupt
 * basename              getmntent_r         iswupper_l         sleep
 * btowc                 getnameinfo         iswxdigit          snprintf
 * catgets               getnetbyaddr        iswxdigit_l        sprintf
 * catopen               getnetbyaddr_r      isxdigit           srand48
 * clearenv              getnetbyname        isxdigit_l         srand48_r
 * clearerr_unlocked     getnetbyname_r      jrand48            srandom_r
 * crypt                 getnetent           jrand48_r          sscanf
 * crypt_gensalt         getnetent_r         l64a               ssignal
 * ctermid               getnetgrent         lcong48            strcasecmp
 * ctime                 getnetgrent_r       lcong48_r          strcasestr
 * ctime_r               getopt              lgamma             strcoll
 * cuserid               getopt_long         lgammaf            strerror
 * dbm_clearerr          getopt_long_only    lgammal            strerror_l
 * dbm_close             getpass             localeconv         strerror_r
 * dbm_delete            getprotobyname      localtime          strfmon
 * dbm_error             getprotobyname_r    localtime_r        strfmon_l
 * dbm_fetch             getprotobynumber    login              strfromd
 * dbm_firstkey          getprotobynumber_r  login_tty          strfromf
 * dbm_nextkey           getprotoent         logout             strfroml
 * dbm_open              getprotoent_r       logwtmp            strftime
 * dbm_store             getpw               lrand48            strftime_l
 * dirname               getpwent            lrand48_r          strncasecmp
 * dlerror               getpwent_r          makecontext        strptime
 * dprintf               getpwnam            mallinfo           strsignal
 * drand48               getpwnam_r          MB_CUR_MAX         strtod
 * drand48_r             getpwuid            mblen              strtof
 * ecvt                  getpwuid_r          mbrlen             strtoimax
 * encrypt               getrpcbyname        mbrtowc            strtok
 * endaliasent           getrpcbyname_r      mbsinit            strtol
 * endfsent              getrpcbynumber      mbsnrtowcs         strtold
 * endgrent              getrpcbynumber_r    mbsrtowcs          strtoll
 * endhostent            getrpcent           mbstowcs           strtoq
 * endnetent             getrpcent_r         mbtowc             strtoul
 * endnetgrent           getrpcport          mcheck             strtoull
 * endprotoent           getservbyname       mcheck_check_all   strtoumax
 * endpwent              getservbyname_r     mcheck_pedantic    strtouq
 * endrpcent             getservbyport       mktime             strverscmp
 * endservent            getservbyport_r     mprobe             strxfrm
 * endspent              getservent          mrand48            swapcontext
 * endttyent             getservent_r        mrand48_r          swprintf
 * endusershell          getspent            mtrace             swscanf
 * endutent              getspent_r          muntrace           sysconf
 * endutxent             getspnam            nan                syslog
 * erand48               getspnam_r          nanf               system
 * erand48_r             getttyent           nanl               tdelete
 * err                   getttynam           newlocale          tempnam
 * error                 getusershell        nftw               tfind
 * error_at_line         getutent            nl_langinfo        timegm
 * errx                  getutid             nrand48            timelocal
 * ether_aton            getutline           nrand48_r          tmpnam
 * ether_ntoa            getutxent           openpty            tolower
 * execlp                getutxid            perror             tolower_l
 * execvp                getutxline          posix_fallocate    toupper
 * execvpe               getwc               printf             toupper_l
 * exit                  getwchar            profil             towctrans
 * __fbufsize            getwchar_unlocked   psiginfo           towlower
 * fcloseall             getwc_unlocked      psignal            towlower_l
 * fcvt                  glob                ptsname            towupper
 * fflush_unlocked       gmtime              putchar_unlocked   towupper_l
 * fgetc_unlocked        gmtime_r            putc_unlocked      tsearch
 * fgetgrent             grantpt             putenv             ttyname
 * fgetpwent             hcreate             putpwent           ttyslot
 * fgetspent             hcreate_r           putspent           twalk
 * fgets_unlocked        hdestroy            pututline          twalk_r
 * fgetwc                hdestroy_r          pututxline         tzset
 * fgetwc_unlocked       hsearch             putwc              ungetwc
 * fgetws                hsearch_r           putwchar           unsetenv
 * fgetws_unlocked       iconv               putwchar_unlocked  updwtmp
 * fnmatch               iconv_open          putwc_unlocked     utmpname
 * forkpty               inet_addr           pvalloc            va_arg
 * __fpending            inet_aton           qecvt              valloc
 * fprintf               inet_network        qfcvt              vasprintf
 * __fpurge              inet_ntoa           rand               vdprintf
 * fputc_unlocked        inet_ntop           random_r           verr
 * fputs_unlocked        inet_pton           rcmd               verrx
 * fputwc                initgroups          rcmd_af            versionsort
 * fputwc_unlocked       initstate_r         readdir            vfprintf
 * fputws                innetgr             re_comp            vfscanf
 * fputws_unlocked       iruserok            re_exec            vfwprintf
 * fread_unlocked        iruserok_af         regcomp            vprintf
 * fscanf                isalnum             regerror           vscanf
 * __fsetlocking         isalnum_l           regexec            vsnprintf
 * fts_children          isalpha             res_nclose         vsprintf
 * fts_read              isalpha_l           res_ninit          vsscanf
 * ftw                   isascii             res_nquery         vswprintf
 * fwprintf              isascii_l           res_nquerydomain   vsyslog
 * fwrite_unlocked       isblank             res_nsearch        vwarn
 * fwscanf               isblank_l           res_nsend          vwarnx
 * gamma                 iscntrl             rexec              vwprintf
 * gammaf                iscntrl_l           rexec_af           warn
 * gammal                isdigit             rpmatch            warnx
 * getaddrinfo           isdigit_l           ruserok            wcrtomb
 * getaliasbyname        isgraph             ruserok_af         wcscasecmp
 * getaliasbyname_r      isgraph_l           scandir            wcschr
 * getaliasent           islower             scanf              wcscoll
 * getaliasent_r         islower_l           secure_getenv      wcsftime
 * getchar_unlocked      isprint             seed48             wcsncasecmp
 * getcontext            isprint_l           seed48_r           wcsnrtombs
 * getc_unlocked         ispunct             setaliasent        wcsrchr
 * get_current_dir_name  ispunct_l           setcontext         wcsrtombs
 * getdate               isspace             setenv             wcstod
 * getdate_r             isspace_l           setfsent           wcstof
 * getenv                isupper             setgrent           wcstoimax
 * getfsent              isupper_l           sethostent         wcstold
 * getfsfile             iswalnum            sethostid          wcstombs
 * getfsspec             iswalnum_l          setkey             wcstoumax
 * getgrent              iswalpha            setlocale          wcswidth
 * getgrent_r            iswalpha_l          setlogmask         wcsxfrm
 * getgrgid              iswblank            setnetent          wctob
 * getgrgid_r            iswblank_l          setnetgrent        wctomb
 * getgrnam              iswcntrl            setprotoent        wctrans
 * getgrnam_r            iswcntrl_l          setpwent           wctype
 * getgrouplist          iswdigit            setrpcent          wcwidth
 * gethostbyaddr         iswdigit_l          setservent         wordexp
 * gethostbyaddr_r       iswgraph            setspent           wprintf
 * gethostbyname         iswgraph_l          setstate_r         wscanf
 *
 * If a function doesn't appear in the above list, perl thinks it is
 * thread-safe on all platforms.  If your experience is otherwise, add an
 * entry in the DATA portion of this file.
 *
 * A few calls are considered totally unsuited for use in a multi-thread
 * environment.  No wrapper macros are generated for these, which must be
 * called only during single-thread operation:
 *
 * endusershell  getaliasbyname  getusershell  rcmd_af   setusershell
 * ether_aton    getaliasent     mtrace        re_comp   ttyslot
 * ether_ntoa    getrpcbyname    muntrace      re_exec   
 * fts_children  getrpcbynumber  profil        rexec     
 * fts_read      getrpcent       rcmd          rexec_af  
 *
 * Some functions perform initialization on their first call that must be done
 * while still in a single-thread environment, but subsequent calls are
 * thread-safe when wrapped with the respective macros defined in this file.
 * Therefore, they must be called at least once before switching to
 * multi-threads:
 *
 * getutent  getutline  getutxid    mallinfo  valloc  
 * getutid   getutxent  getutxline  pvalloc   
 *
 * Some functions use and/or modify a global state, such as a database.
 * The libc functions presume that there is only one thread at a time
 * operating on that database.  Unpredictable results occur if more than one
 * does, even if the database is not changed.  For example, typically there is
 * a global iterator for the data base maintained by libc, so that each new
 * read from any thread advances it, meaning that no thread will see all the
 * entries.  The only way to make these thread-safe is to have an exclusive
 * lock on a mutex from the open call to the close.  This is beyond the
 * current scope of this header.  You are advised to not use such databases
 * from more than one thread at a time.  The lock macros here only are
 * designed to make the individual function calls thread-safe just for the
 * duration of the call.  Comments at each definition tell what other
 * functions have races with that function.  Typically the functions that fall
 * into this class have races with other functions whose names begin with
 * "end", such as "endgrent()".  Other examples include pseudo-random number
 * generators.  Some libc implementations of 'rand()', for example, may share
 * the data across threads; and others may have per-thread data.  The shared
 * ones will have unreproducible results, as the threads vary in their
 * timings and interactions.  This may be what you want; or it may not be.
 * (This particular function may be removed from the POSIX Standard because of
 * these issues.)
 *
 * Other functions that output to a stream also are considered thread-unsafe
 * without locking.  but the typical consequences are just that the data is
 * output in unpredictable ways, which may be totally acceptable.  However, it
 * is beyond the scope of these macros to make sure that formatted output uses
 * a non-dot radix decimal point.  Use the WITH_LC_NUMERIC_SET_TO_NEEDED()
 * macro #defined in perl.h to accomplish this.
 *
 * The rest of the functions, when wrapped with their respective LOCK and
 * UNLOCK macros, should be thread-safe.
 *
 * However, some of these are not thread-safe if called with arguments that
 * don't comply with certain (easily-met) restrictions.  Those are commented
 * where their respective macros are #defined.  The macros assume that the
 * function is called with the appropriate restrictions.
 *
 * The macros here do not help in coping with asynchronous signals.  For
 * these, you need to see the vendor man pages.  The functions here known to
 * be vulnerable to signals are:
 *
 * getlogin    getutid    getutxid    login    pututline   updwtmp  
 * getlogin_r  getutline  getutxline  logout   pututxline  wordexp  
 * getutent    getutxent  glob        logwtmp  sleep       
 *
 * Some libc's implement 'system()' thread-safely.  But in others, it also
 * has signal issues.
 *
 * In theory, you should wrap every instance of every function listed here
 * with its corresponding lock macros, except as noted above.  The macros here
 * all should expand to no-ops when run from an unthreaded perl.  Many also
 * expand to no-ops on various other platforms and Configurations.  They exist
 * so you you don't have to worry about this.  Some definitions are no-ops in
 * all current cases, but you should wrap their functions anyway, as future
 * work likely will yield Configurations where they aren't just no-ops.
 *
 * You may override any definitions here simply by #defining your own before
 * #including this file.
 *
 * The macros are designed to not result in deadlock, but best practice is to
 * call the LOCK macro; call the function and copy the result to a per-thread
 * place if that result points to a buffer internal to libc; then UNLOCK it
 * immediately.  Then act on the result.
 *
 * The macros here are generated from an internal DATA section in
 * regen/lock_definitions.pl, populated from information derived from the
 * POSIX 2017 Standard and Linux glibc section 3 man pages.  (Linux tends to
 * have extra restrictions not in the Standard, and its man pages are
 * typically more detailed than the Standard, and other vendors, who may also
 * have the same restrictions, but just don't document them.) The data can
 * easily be adjusted as necessary.
 */
#define LC_ALLb_  LC_INDEX_TO_BIT_(LC_ALL_INDEX_)

#if defined(LC_CTYPE) && defined(PERL_MUST_DEAL_WITH_MISMATCHED_CTYPE)
#  define INCLUDE_CTYPE_  LC_INDEX_TO_BIT_(LC_CTYPE_INDEX_)
#else
#  define INCLUDE_CTYPE_  0
#endif
#ifdef LC_COLLATE
#  define LC_COLLATEb_  LC_INDEX_TO_BIT_(LC_COLLATE_INDEX_)|INCLUDE_CTYPE_
#else
#  define LC_COLLATEb_  LC_ALLb_
#endif
#ifdef LC_CTYPE
#  define LC_CTYPEb_  LC_INDEX_TO_BIT_(LC_CTYPE_INDEX_)|INCLUDE_CTYPE_
#else
#  define LC_CTYPEb_  LC_ALLb_
#endif
#ifdef LC_MESSAGES
#  define LC_MESSAGESb_  LC_INDEX_TO_BIT_(LC_MESSAGES_INDEX_)|INCLUDE_CTYPE_
#else
#  define LC_MESSAGESb_  LC_ALLb_
#endif
#ifdef LC_MONETARY
#  define LC_MONETARYb_  LC_INDEX_TO_BIT_(LC_MONETARY_INDEX_)|INCLUDE_CTYPE_
#else
#  define LC_MONETARYb_  LC_ALLb_
#endif
#ifdef LC_NUMERIC
#  define LC_NUMERICb_  LC_INDEX_TO_BIT_(LC_NUMERIC_INDEX_)|INCLUDE_CTYPE_
#else
#  define LC_NUMERICb_  LC_ALLb_
#endif
#ifdef LC_TIME
#  define LC_TIMEb_  LC_INDEX_TO_BIT_(LC_TIME_INDEX_)|INCLUDE_CTYPE_
#else
#  define LC_TIMEb_  LC_ALLb_
#endif

#ifndef ADDMNTENT_LOCK

   /* addmntent() has races with other threads concurrently executing any of:
    *             itself, clearerr_unlocked(), __fbufsize(),
    *             fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(),
    *             fgetwc_unlocked(), fgetws_unlocked(), __fpending(),
    *             __fpurge(), fputc_unlocked(), fputs_unlocked(),
    *             fputwc_unlocked(), fputws_unlocked(), fread_unlocked(),
    *             __fsetlocking(), fwrite_unlocked(), getc_unlocked(),
    *             getwc_unlocked(), putc_unlocked(), or putwc_unlocked(). */
#  define ADDMNTENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define ADDMNTENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ALPHASORT_LOCK
#  define ALPHASORT_LOCK    LCr_LOCK_(LC_ALLb_)
#  define ALPHASORT_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ASCTIME_LOCK

   /* asctime() Obsolete, use Perl_sv_strftime_tm() instead
    * asctime() has races with other threads concurrently executing either
    *           itself or ctime. */
#  define ASCTIME_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define ASCTIME_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ASCTIME_R_LOCK

   /* asctime_r() Obsolete, use Perl_sv_strftime_tm() instead */
#  define ASCTIME_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define ASCTIME_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ASPRINTF_LOCK
#  define ASPRINTF_LOCK    LCr_LOCK_(LC_ALLb_)
#  define ASPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ATOF_LOCK
#  define ATOF_LOCK    LCr_LOCK_(LC_ALLb_)
#  define ATOF_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ATOI_LOCK
#  define ATOI_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define ATOI_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef ATOL_LOCK
#  define ATOL_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define ATOL_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef ATOLL_LOCK
#  define ATOLL_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define ATOLL_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef BASENAME_LOCK
#  ifndef __GLIBC__
#    define BASENAME_LOCK    GENw_LOCK_
#    define BASENAME_UNLOCK  GENw_UNLOCK_
#  else
#    define BASENAME_LOCK    NOOP
#    define BASENAME_UNLOCK  NOOP
#  endif
#endif

#ifndef BTOWC_LOCK
#  define BTOWC_LOCK    NOOP
#  define BTOWC_UNLOCK  NOOP
#endif

#ifndef CATGETS_LOCK
#  ifndef __GLIBC__
#    define CATGETS_LOCK    GENw_LOCK_
#    define CATGETS_UNLOCK  GENw_UNLOCK_
#  else
#    define CATGETS_LOCK    NOOP
#    define CATGETS_UNLOCK  NOOP
#  endif
#endif

#ifndef CATOPEN_LOCK
#  define CATOPEN_LOCK    ENVr_LOCK_
#  define CATOPEN_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef CLEARENV_LOCK
#  define CLEARENV_LOCK    ENVw_LOCK_
#  define CLEARENV_UNLOCK  ENVw_UNLOCK_
#endif

#ifndef CLEARERR_UNLOCKED_LOCK

   /* clearerr_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                     locked the stream, but should not be used since not
    *                     standardized and not widely implemented
    * clearerr_unlocked() has races with other threads concurrently executing
    *                     any of: itself, addmntent(), __fbufsize(),
    *                     fflush_unlocked(), fgetc_unlocked(),
    *                     fgets_unlocked(), fgetwc_unlocked(),
    *                     fgetws_unlocked(), __fpending(), __fpurge(),
    *                     fputc_unlocked(), fputs_unlocked(),
    *                     fputwc_unlocked(), fputws_unlocked(),
    *                     fread_unlocked(), __fsetlocking(),
    *                     fwrite_unlocked(), getc_unlocked(),
    *                     getwc_unlocked(), putc_unlocked(), or
    *                     putwc_unlocked(). */
#  define CLEARERR_UNLOCKED_LOCK    GENw_LOCK_
#  define CLEARERR_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef CRYPT_LOCK

   /* crypt() has races with other threads concurrently executing any of:
    *         itself, encrypt(), or setkey(). */
#  define CRYPT_LOCK    GENw_LOCK_
#  define CRYPT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef CRYPT_GENSALT_LOCK
#  define CRYPT_GENSALT_LOCK    GENw_LOCK_
#  define CRYPT_GENSALT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef CTERMID_LOCK
#  ifndef __GLIBC__

     /* ctermid() macros only valid if !s */
#    define CTERMID_LOCK    NOOP
#    define CTERMID_UNLOCK  NOOP
#  else
#    define CTERMID_LOCK    NOOP
#    define CTERMID_UNLOCK  NOOP
#  endif
#endif

#ifndef CTIME_LOCK

   /* ctime() Obsolete, use Perl_sv_strftime_ints() instead
    * ctime() has races with other threads concurrently executing any of:
    *         itself, asctime(), gmtime(), or localtime(). */
#  define CTIME_LOCK    GENw_ENVr_LCr_LOCK_(LC_TIMEb_)
#  define CTIME_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_TIMEb_)
#endif

#ifndef CTIME_R_LOCK

   /* ctime_r() Obsolete, use Perl_sv_strftime_ints() instead; has a race
    *           because some implementations may call tzset */
#  define CTIME_R_LOCK    GENw_ENVr_LCr_LOCK_(LC_TIMEb_)
#  define CTIME_R_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_TIMEb_)
#endif

#ifndef CUSERID_LOCK

   /* cuserid() macros only valid if !string */
#  define CUSERID_LOCK    LCr_LOCK_(LC_ALLb_)
#  define CUSERID_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef DBM_CLEARERR_LOCK
#  define DBM_CLEARERR_LOCK    GENw_LOCK_
#  define DBM_CLEARERR_UNLOCK  GENw_UNLOCK_
#endif

#ifndef DBM_CLOSE_LOCK
#  define DBM_CLOSE_LOCK    GENw_LOCK_
#  define DBM_CLOSE_UNLOCK  GENw_UNLOCK_
#endif

#ifndef DBM_DELETE_LOCK
#  define DBM_DELETE_LOCK    GENw_LOCK_
#  define DBM_DELETE_UNLOCK  GENw_UNLOCK_
#endif

#ifndef DBM_ERROR_LOCK
#  define DBM_ERROR_LOCK    GENw_LOCK_
#  define DBM_ERROR_UNLOCK  GENw_UNLOCK_
#endif

#ifndef DBM_FETCH_LOCK
#  define DBM_FETCH_LOCK    GENw_LOCK_
#  define DBM_FETCH_UNLOCK  GENw_UNLOCK_
#endif

#ifndef DBM_FIRSTKEY_LOCK
#  define DBM_FIRSTKEY_LOCK    GENw_LOCK_
#  define DBM_FIRSTKEY_UNLOCK  GENw_UNLOCK_
#endif

#ifndef DBM_NEXTKEY_LOCK
#  define DBM_NEXTKEY_LOCK    GENw_LOCK_
#  define DBM_NEXTKEY_UNLOCK  GENw_UNLOCK_
#endif

#ifndef DBM_OPEN_LOCK
#  define DBM_OPEN_LOCK    GENw_LOCK_
#  define DBM_OPEN_UNLOCK  GENw_UNLOCK_
#endif

#ifndef DBM_STORE_LOCK
#  define DBM_STORE_LOCK    GENw_LOCK_
#  define DBM_STORE_UNLOCK  GENw_UNLOCK_
#endif

#ifndef DIRNAME_LOCK
#  ifndef __GLIBC__
#    define DIRNAME_LOCK    LCr_LOCK_(LC_ALLb_)
#    define DIRNAME_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#  else
#    define DIRNAME_LOCK    NOOP
#    define DIRNAME_UNLOCK  NOOP
#  endif
#endif

#ifndef DLERROR_LOCK
#  ifndef __GLIBC__
#    define DLERROR_LOCK    GENw_LOCK_
#    define DLERROR_UNLOCK  GENw_UNLOCK_
#  else
#    define DLERROR_LOCK    NOOP
#    define DLERROR_UNLOCK  NOOP
#  endif
#endif

#ifndef DPRINTF_LOCK
#  define DPRINTF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define DPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef DRAND48_LOCK

   /* drand48() has races with other threads concurrently executing any of:
    *           itself, erand48(), jrand48(), lcong48(), lrand48(), mrand48(),
    *           nrand48(), seed48(), or srand48(). */
#  define DRAND48_LOCK    GENw_LOCK_
#  define DRAND48_UNLOCK  GENw_UNLOCK_
#endif

#ifndef DRAND48_R_LOCK

   /* drand48_r() has races with other threads concurrently executing any of:
    *             itself, erand48_r(), jrand48_r(), lcong48_r(), lrand48_r(),
    *             mrand48_r(), nrand48_r(), seed48_r(), or srand48_r(). */
#  define DRAND48_R_LOCK    GENw_LOCK_
#  define DRAND48_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef ECVT_LOCK

   /* ecvt() Obsolete, use snprintf() instead */
#  define ECVT_LOCK    GENw_LOCK_
#  define ECVT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef ENCRYPT_LOCK

   /* encrypt() has races with other threads concurrently executing any of:
    *           itself, crypt(), or setkey(). */
#  define ENCRYPT_LOCK    GENw_LOCK_
#  define ENCRYPT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef ENDALIASENT_LOCK
#  define ENDALIASENT_LOCK    LCr_LOCK_(LC_ALLb_)
#  define ENDALIASENT_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ENDFSENT_LOCK

   /* endfsent() has races with other threads concurrently executing any of:
    *            itself, getfsent(), getfsfile(), getfsspec(), or setfsent().
    */
#  define ENDFSENT_LOCK    GENw_LOCK_
#  define ENDFSENT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef ENDGRENT_LOCK

   /* endgrent() has races with other threads concurrently executing any of:
    *            itself, getgrent(), getgrent_r(), or setgrent(). */
#  define ENDGRENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define ENDGRENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ENDHOSTENT_LOCK

   /* endhostent() has races with other threads concurrently executing any of:
    *              itself, gethostent(), gethostent_r(), or sethostent(). */
#  define ENDHOSTENT_LOCK    GENw_ENVr_LCr_LOCK_(LC_ALLb_)
#  define ENDHOSTENT_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ENDNETENT_LOCK

   /* endnetent() has races with other threads concurrently executing any of:
    *             itself, getnetent(), or setnetent(). */
#  define ENDNETENT_LOCK    GENw_ENVr_LCr_LOCK_(LC_ALLb_)
#  define ENDNETENT_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ENDNETGRENT_LOCK

   /* endnetgrent() has races with other threads concurrently executing any
    *               of: itself, getnetgrent(), getnetgrent_r(), innetgr(), or
    *               setnetgrent(). */
#  define ENDNETGRENT_LOCK    GENw_LOCK_
#  define ENDNETGRENT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef ENDPROTOENT_LOCK

   /* endprotoent() has races with other threads concurrently executing any
    *               of: itself, getprotoent(), or setprotoent(). */
#  define ENDPROTOENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define ENDPROTOENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ENDPWENT_LOCK

   /* endpwent() has races with other threads concurrently executing any of:
    *            itself, getpwent(), getpwent_r(), or setpwent(). */
#  define ENDPWENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define ENDPWENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ENDRPCENT_LOCK
#  define ENDRPCENT_LOCK    LCr_LOCK_(LC_ALLb_)
#  define ENDRPCENT_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ENDSERVENT_LOCK

   /* endservent() has races with other threads concurrently executing any of:
    *              itself, getservent(), or setservent(). */
#  define ENDSERVENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define ENDSERVENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ENDSPENT_LOCK

   /* endspent() has races with other threads concurrently executing any of:
    *            itself, getspent(), getspent_r(), or setspent(). */
#  define ENDSPENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define ENDSPENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ENDTTYENT_LOCK

   /* endttyent() has races with other threads concurrently executing any of:
    *             itself, getttyent(), getttynam(), or setttyent(). */
#  define ENDTTYENT_LOCK    GENw_LOCK_
#  define ENDTTYENT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef ENDUSERSHELL_LOCK
#  define ENDUSERSHELL_LOCK                              \
#    error endusershell not suitable for multi-threaded operation
#endif

#ifndef ENDUTENT_LOCK

   /* endutent() Obsolete; use endutxent() instead
    * endutent() has races with other threads concurrently executing any of:
    *            itself, endutxent(), getlogin(), getlogin_r(), getutent(),
    *            getutid(), getutline(), getutxent(), getutxid(),
    *            getutxline(), glob(), login(), logout(), pututline(),
    *            pututxline(), setutent(), setutxent(), utmpname(), or
    *            wordexp(). */
#  define ENDUTENT_LOCK    GENw_LOCK_
#  define ENDUTENT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef ENDUTXENT_LOCK

   /* endutxent() has races with other threads concurrently executing any of:
    *             itself, endutent(), getlogin(), getlogin_r(), getutent(),
    *             getutid(), getutline(), getutxent(), getutxid(),
    *             getutxline(), glob(), login(), logout(), pututline(),
    *             pututxline(), setutent(), setutxent(), utmpname(), or
    *             wordexp(). */
#  define ENDUTXENT_LOCK    GENw_LOCK_
#  define ENDUTXENT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef ERAND48_LOCK

   /* erand48() has races with other threads concurrently executing any of:
    *           itself, drand48(), jrand48(), lcong48(), lrand48(), mrand48(),
    *           nrand48(), seed48(), or srand48(). */
#  define ERAND48_LOCK    GENw_LOCK_
#  define ERAND48_UNLOCK  GENw_UNLOCK_
#endif

#ifndef ERAND48_R_LOCK

   /* erand48_r() has races with other threads concurrently executing any of:
    *             itself, drand48_r(), jrand48_r(), lcong48_r(), lrand48_r(),
    *             mrand48_r(), nrand48_r(), seed48_r(), or srand48_r(). */
#  define ERAND48_R_LOCK    GENw_LOCK_
#  define ERAND48_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef ERR_LOCK
#  define ERR_LOCK    LCr_LOCK_(LC_ALLb_)
#  define ERR_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ERROR_LOCK
#  define ERROR_LOCK    LCr_LOCK_(LC_ALLb_)
#  define ERROR_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ERROR_AT_LINE_LOCK

   /* error_at_line() macros only valid if error_one_per_line */
#  define ERROR_AT_LINE_LOCK    LCr_LOCK_(LC_ALLb_)
#  define ERROR_AT_LINE_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ERRX_LOCK
#  define ERRX_LOCK    LCr_LOCK_(LC_ALLb_)
#  define ERRX_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ETHER_ATON_LOCK
#  define ETHER_ATON_LOCK                              \
#    error ether_aton not suitable for multi-threaded operation
#endif

#ifndef ETHER_NTOA_LOCK
#  define ETHER_NTOA_LOCK                              \
#    error ether_ntoa not suitable for multi-threaded operation
#endif

#ifndef EXECLP_LOCK
#  define EXECLP_LOCK    ENVr_LOCK_
#  define EXECLP_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef EXECVP_LOCK
#  define EXECVP_LOCK    ENVr_LOCK_
#  define EXECVP_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef EXECVPE_LOCK
#  define EXECVPE_LOCK    ENVr_LOCK_
#  define EXECVPE_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef EXIT_LOCK
#  define EXIT_LOCK    GENw_LOCK_
#  define EXIT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef __FBUFSIZE_LOCK

   /* __fbufsize() has races with other threads concurrently executing any of:
    *              itself, addmntent(), clearerr_unlocked(),
    *              fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(),
    *              fgetwc_unlocked(), fgetws_unlocked(), __fpending(),
    *              __fpurge(), fputc_unlocked(), fputs_unlocked(),
    *              fputwc_unlocked(), fputws_unlocked(), fread_unlocked(),
    *              __fsetlocking(), fwrite_unlocked(), getc_unlocked(),
    *              getwc_unlocked(), putc_unlocked(), or putwc_unlocked(). */
#  define __FBUFSIZE_LOCK    GENw_LOCK_
#  define __FBUFSIZE_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FCLOSEALL_LOCK
#  define FCLOSEALL_LOCK    GENw_LOCK_
#  define FCLOSEALL_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FCVT_LOCK

   /* fcvt() Obsolete, use snprintf() instead */
#  define FCVT_LOCK    GENw_LOCK_
#  define FCVT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FFLUSH_UNLOCKED_LOCK

   /* fflush_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                   locked the stream, but should not be used since not
    *                   standardized and not widely implemented
    * fflush_unlocked() has races with other threads concurrently executing
    *                   any of: itself, addmntent(), clearerr_unlocked(),
    *                   __fbufsize(), fgetc_unlocked(), fgets_unlocked(),
    *                   fgetwc_unlocked(), fgetws_unlocked(), __fpending(),
    *                   __fpurge(), fputc_unlocked(), fputs_unlocked(),
    *                   fputwc_unlocked(), fputws_unlocked(),
    *                   fread_unlocked(), __fsetlocking(), fwrite_unlocked(),
    *                   getc_unlocked(), getwc_unlocked(), putc_unlocked(), or
    *                   putwc_unlocked(). */
#  define FFLUSH_UNLOCKED_LOCK    GENw_LOCK_
#  define FFLUSH_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FGETC_UNLOCKED_LOCK

   /* fgetc_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                  locked the stream, but should not be used since not
    *                  standardized and not widely implemented
    * fgetc_unlocked() has races with other threads concurrently executing any
    *                  of: itself, addmntent(), clearerr_unlocked(),
    *                  __fbufsize(), fflush_unlocked(), fgets_unlocked(),
    *                  fgetwc_unlocked(), fgetws_unlocked(), __fpending(),
    *                  __fpurge(), fputc_unlocked(), fputs_unlocked(),
    *                  fputwc_unlocked(), fputws_unlocked(), fread_unlocked(),
    *                  __fsetlocking(), fwrite_unlocked(), getc_unlocked(),
    *                  getwc_unlocked(), putc_unlocked(), or putwc_unlocked().
    */
#  define FGETC_UNLOCKED_LOCK    GENw_LOCK_
#  define FGETC_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FGETGRENT_LOCK
#  define FGETGRENT_LOCK    GENw_LOCK_
#  define FGETGRENT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FGETPWENT_LOCK
#  define FGETPWENT_LOCK    GENw_LOCK_
#  define FGETPWENT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FGETSPENT_LOCK
#  define FGETSPENT_LOCK    GENw_LOCK_
#  define FGETSPENT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FGETS_UNLOCKED_LOCK

   /* fgets_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                  locked the stream, but should not be used since not
    *                  standardized and not widely implemented
    * fgets_unlocked() has races with other threads concurrently executing any
    *                  of: itself, addmntent(), clearerr_unlocked(),
    *                  __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                  fgetwc_unlocked(), fgetws_unlocked(), __fpending(),
    *                  __fpurge(), fputc_unlocked(), fputs_unlocked(),
    *                  fputwc_unlocked(), fputws_unlocked(), fread_unlocked(),
    *                  __fsetlocking(), fwrite_unlocked(), getc_unlocked(),
    *                  getwc_unlocked(), putc_unlocked(), or putwc_unlocked().
    */
#  define FGETS_UNLOCKED_LOCK    GENw_LOCK_
#  define FGETS_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FGETWC_LOCK
#  define FGETWC_LOCK    NOOP
#  define FGETWC_UNLOCK  NOOP
#endif

#ifndef FGETWC_UNLOCKED_LOCK

   /* fgetwc_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                   locked the stream, but should not be used since not
    *                   standardized and not widely implemented
    * fgetwc_unlocked() has races with other threads concurrently executing
    *                   any of: itself, addmntent(), clearerr_unlocked(),
    *                   __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                   fgets_unlocked(), fgetws_unlocked(), __fpending(),
    *                   __fpurge(), fputc_unlocked(), fputs_unlocked(),
    *                   fputwc_unlocked(), fputws_unlocked(),
    *                   fread_unlocked(), __fsetlocking(), fwrite_unlocked(),
    *                   getc_unlocked(), getwc_unlocked(), putc_unlocked(), or
    *                   putwc_unlocked(). */
#  define FGETWC_UNLOCKED_LOCK    GENw_LOCK_
#  define FGETWC_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FGETWS_LOCK
#  define FGETWS_LOCK    NOOP
#  define FGETWS_UNLOCK  NOOP
#endif

#ifndef FGETWS_UNLOCKED_LOCK

   /* fgetws_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                   locked the stream, but should not be used since not
    *                   standardized and not widely implemented
    * fgetws_unlocked() has races with other threads concurrently executing
    *                   any of: itself, addmntent(), clearerr_unlocked(),
    *                   __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                   fgets_unlocked(), fgetwc_unlocked(), __fpending(),
    *                   __fpurge(), fputc_unlocked(), fputs_unlocked(),
    *                   fputwc_unlocked(), fputws_unlocked(),
    *                   fread_unlocked(), __fsetlocking(), fwrite_unlocked(),
    *                   getc_unlocked(), getwc_unlocked(), putc_unlocked(), or
    *                   putwc_unlocked(). */
#  define FGETWS_UNLOCKED_LOCK    GENw_LOCK_
#  define FGETWS_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FNMATCH_LOCK
#  define FNMATCH_LOCK    ENVr_LCr_LOCK_(LC_ALLb_)
#  define FNMATCH_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef FORKPTY_LOCK
#  define FORKPTY_LOCK    LCr_LOCK_(LC_ALLb_)
#  define FORKPTY_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef __FPENDING_LOCK

   /* __fpending() has races with other threads concurrently executing any of:
    *              itself, addmntent(), clearerr_unlocked(), __fbufsize(),
    *              fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(),
    *              fgetwc_unlocked(), fgetws_unlocked(), __fpurge(),
    *              fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(),
    *              fputws_unlocked(), fread_unlocked(), __fsetlocking(),
    *              fwrite_unlocked(), getc_unlocked(), getwc_unlocked(),
    *              putc_unlocked(), or putwc_unlocked(). */
#  define __FPENDING_LOCK    GENw_LOCK_
#  define __FPENDING_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FPRINTF_LOCK
#  define FPRINTF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define FPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef __FPURGE_LOCK

   /* __fpurge() Not in POSIX Standard and not portable
    * __fpurge() has races with other threads concurrently executing any of:
    *            itself, addmntent(), clearerr_unlocked(), __fbufsize(),
    *            fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(),
    *            fgetwc_unlocked(), fgetws_unlocked(), __fpending(),
    *            fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(),
    *            fputws_unlocked(), fread_unlocked(), __fsetlocking(),
    *            fwrite_unlocked(), getc_unlocked(), getwc_unlocked(),
    *            putc_unlocked(), or putwc_unlocked(). */
#  define __FPURGE_LOCK    GENw_LOCK_
#  define __FPURGE_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FPUTC_UNLOCKED_LOCK

   /* fputc_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                  locked the stream, but should not be used since not
    *                  standardized and not widely implemented
    * fputc_unlocked() has races with other threads concurrently executing any
    *                  of: itself, addmntent(), clearerr_unlocked(),
    *                  __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                  fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *                  __fpending(), __fpurge(), fputs_unlocked(),
    *                  fputwc_unlocked(), fputws_unlocked(), fread_unlocked(),
    *                  __fsetlocking(), fwrite_unlocked(), getc_unlocked(),
    *                  getwc_unlocked(), putc_unlocked(), or putwc_unlocked().
    */
#  define FPUTC_UNLOCKED_LOCK    GENw_LOCK_
#  define FPUTC_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FPUTS_UNLOCKED_LOCK

   /* fputs_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                  locked the stream, but should not be used since not
    *                  standardized and not widely implemented
    * fputs_unlocked() has races with other threads concurrently executing any
    *                  of: itself, addmntent(), clearerr_unlocked(),
    *                  __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                  fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *                  __fpending(), __fpurge(), fputc_unlocked(),
    *                  fputwc_unlocked(), fputws_unlocked(), fread_unlocked(),
    *                  __fsetlocking(), fwrite_unlocked(), getc_unlocked(),
    *                  getwc_unlocked(), putc_unlocked(), or putwc_unlocked().
    */
#  define FPUTS_UNLOCKED_LOCK    GENw_LOCK_
#  define FPUTS_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FPUTWC_LOCK
#  define FPUTWC_LOCK    NOOP
#  define FPUTWC_UNLOCK  NOOP
#endif

#ifndef FPUTWC_UNLOCKED_LOCK

   /* fputwc_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                   locked the stream, but should not be used since not
    *                   standardized and not widely implemented
    * fputwc_unlocked() has races with other threads concurrently executing
    *                   any of: itself, addmntent(), clearerr_unlocked(),
    *                   __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                   fgets_unlocked(), fgetwc_unlocked(),
    *                   fgetws_unlocked(), __fpending(), __fpurge(),
    *                   fputc_unlocked(), fputs_unlocked(), fputws_unlocked(),
    *                   fread_unlocked(), __fsetlocking(), fwrite_unlocked(),
    *                   getc_unlocked(), getwc_unlocked(), putc_unlocked(), or
    *                   putwc_unlocked(). */
#  define FPUTWC_UNLOCKED_LOCK    GENw_LOCK_
#  define FPUTWC_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FPUTWS_LOCK
#  define FPUTWS_LOCK    NOOP
#  define FPUTWS_UNLOCK  NOOP
#endif

#ifndef FPUTWS_UNLOCKED_LOCK

   /* fputws_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                   locked the stream, but should not be used since not
    *                   standardized and not widely implemented
    * fputws_unlocked() has races with other threads concurrently executing
    *                   any of: itself, addmntent(), clearerr_unlocked(),
    *                   __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                   fgets_unlocked(), fgetwc_unlocked(),
    *                   fgetws_unlocked(), __fpending(), __fpurge(),
    *                   fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(),
    *                   fread_unlocked(), __fsetlocking(), fwrite_unlocked(),
    *                   getc_unlocked(), getwc_unlocked(), putc_unlocked(), or
    *                   putwc_unlocked(). */
#  define FPUTWS_UNLOCKED_LOCK    GENw_LOCK_
#  define FPUTWS_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FREAD_UNLOCKED_LOCK

   /* fread_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                  locked the stream, but should not be used since not
    *                  standardized and not widely implemented
    * fread_unlocked() has races with other threads concurrently executing any
    *                  of: itself, addmntent(), clearerr_unlocked(),
    *                  __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                  fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *                  __fpending(), __fpurge(), fputc_unlocked(),
    *                  fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(),
    *                  __fsetlocking(), fwrite_unlocked(), getc_unlocked(),
    *                  getwc_unlocked(), putc_unlocked(), or putwc_unlocked().
    */
#  define FREAD_UNLOCKED_LOCK    GENw_LOCK_
#  define FREAD_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FSCANF_LOCK
#  define FSCANF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define FSCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef __FSETLOCKING_LOCK

   /* __fsetlocking() has races with other threads concurrently executing any
    *                 of: itself, addmntent(), clearerr_unlocked(),
    *                 __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                 fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *                 __fpending(), __fpurge(), fputc_unlocked(),
    *                 fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(),
    *                 fread_unlocked(), fwrite_unlocked(), getc_unlocked(),
    *                 getwc_unlocked(), putc_unlocked(), or putwc_unlocked().
    */
#  define __FSETLOCKING_LOCK    GENw_LOCK_
#  define __FSETLOCKING_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FTS_CHILDREN_LOCK
#  define FTS_CHILDREN_LOCK                              \
#    error fts_children not suitable for multi-threaded operation
#endif

#ifndef FTS_READ_LOCK
#  define FTS_READ_LOCK                              \
#    error fts_read not suitable for multi-threaded operation
#endif

#ifndef FTW_LOCK

   /* ftw() Obsolete */
#  define FTW_LOCK    GENw_LOCK_
#  define FTW_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FWPRINTF_LOCK
#  define FWPRINTF_LOCK    LCr_LOCK_(LC_CTYPEb_|LC_NUMERICb_)
#  define FWPRINTF_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_|LC_NUMERICb_)
#endif

#ifndef FWRITE_UNLOCKED_LOCK

   /* fwrite_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                   locked the stream, but should not be used since not
    *                   standardized and not widely implemented
    * fwrite_unlocked() has races with other threads concurrently executing
    *                   any of: itself, addmntent(), clearerr_unlocked(),
    *                   __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                   fgets_unlocked(), fgetwc_unlocked(),
    *                   fgetws_unlocked(), __fpending(), __fpurge(),
    *                   fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(),
    *                   fputws_unlocked(), fread_unlocked(), __fsetlocking(),
    *                   getc_unlocked(), getwc_unlocked(), putc_unlocked(), or
    *                   putwc_unlocked(). */
#  define FWRITE_UNLOCKED_LOCK    GENw_LOCK_
#  define FWRITE_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef FWSCANF_LOCK
#  define FWSCANF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define FWSCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef GAMMA_LOCK

   /* gamma() has races with other threads concurrently executing any of:
    *         itself, gammaf(), gammal(), lgamma(), lgammaf(), or lgammal(). */
#  define GAMMA_LOCK    GENw_LOCK_
#  define GAMMA_UNLOCK  GENw_UNLOCK_
#endif

#ifndef GAMMAF_LOCK

   /* gammaf() has races with other threads concurrently executing any of:
    *          itself, gamma(), gammal(), lgamma(), lgammaf(), or lgammal(). */
#  define GAMMAF_LOCK    GENw_LOCK_
#  define GAMMAF_UNLOCK  GENw_UNLOCK_
#endif

#ifndef GAMMAL_LOCK

   /* gammal() has races with other threads concurrently executing any of:
    *          itself, gamma(), gammaf(), lgamma(), lgammaf(), or lgammal(). */
#  define GAMMAL_LOCK    GENw_LOCK_
#  define GAMMAL_UNLOCK  GENw_UNLOCK_
#endif

#ifndef GETADDRINFO_LOCK
#  define GETADDRINFO_LOCK    ENVr_LCr_LOCK_(LC_ALLb_)
#  define GETADDRINFO_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETALIASBYNAME_LOCK
#  define GETALIASBYNAME_LOCK                              \
#    error getaliasbyname not suitable for multi-threaded operation
#endif

#ifndef GETALIASBYNAME_R_LOCK
#  define GETALIASBYNAME_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETALIASBYNAME_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETALIASENT_LOCK
#  define GETALIASENT_LOCK                              \
#    error getaliasent not suitable for multi-threaded operation
#endif

#ifndef GETALIASENT_R_LOCK
#  define GETALIASENT_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETALIASENT_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETCHAR_UNLOCKED_LOCK

   /* getchar_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                    locked stdin
    * getchar_unlocked() has races with other threads concurrently executing
    *                    either itself or getwchar_unlocked. */
#  define GETCHAR_UNLOCKED_LOCK    GENw_LOCK_
#  define GETCHAR_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef GETCONTEXT_LOCK

   /* getcontext() has races with other threads concurrently executing any of:
    *              itself, makecontext(), setcontext(), or swapcontext(). */
#  define GETCONTEXT_LOCK    GENw_LOCK_
#  define GETCONTEXT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef GETC_UNLOCKED_LOCK

   /* getc_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                 locked the stream
    * getc_unlocked() has races with other threads concurrently executing any
    *                 of: itself, addmntent(), clearerr_unlocked(),
    *                 __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                 fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *                 __fpending(), __fpurge(), fputc_unlocked(),
    *                 fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(),
    *                 fread_unlocked(), __fsetlocking(), fwrite_unlocked(),
    *                 getwc_unlocked(), putc_unlocked(), or putwc_unlocked().
    */
#  define GETC_UNLOCKED_LOCK    GENw_LOCK_
#  define GETC_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef GET_CURRENT_DIR_NAME_LOCK
#  define GET_CURRENT_DIR_NAME_LOCK    ENVr_LOCK_
#  define GET_CURRENT_DIR_NAME_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef GETDATE_LOCK
#  define GETDATE_LOCK    GENw_ENVr_LCr_LOCK_(LC_TIMEb_)
#  define GETDATE_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_TIMEb_)
#endif

#ifndef GETDATE_R_LOCK
#  define GETDATE_R_LOCK    ENVr_LCr_LOCK_(LC_TIMEb_)
#  define GETDATE_R_UNLOCK  ENVr_LCr_UNLOCK_(LC_TIMEb_)
#endif

#ifndef GETENV_LOCK
#  ifdef GETENV_PRESERVES_OTHER_THREAD
#    define GETENV_LOCK    ENVr_LOCK_
#    define GETENV_UNLOCK  ENVr_UNLOCK_
#  else
#    define GETENV_LOCK    GENw_ENVr_LOCK_
#    define GETENV_UNLOCK  GENw_ENVr_UNLOCK_
#  endif
#endif

#ifndef GETFSENT_LOCK

   /* getfsent() has races with other threads concurrently executing any of:
    *            itself, endfsent(), getfsfile(), getfsspec(), or setfsent().
    */
#  define GETFSENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETFSENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETFSFILE_LOCK

   /* getfsfile() has races with other threads concurrently executing any of:
    *             itself, endfsent(), getfsent(), getfsspec(), or setfsent().
    */
#  define GETFSFILE_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETFSFILE_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETFSSPEC_LOCK

   /* getfsspec() has races with other threads concurrently executing any of:
    *             itself, endfsent(), getfsent(), getfsfile(), or setfsent().
    */
#  define GETFSSPEC_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETFSSPEC_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETGRENT_LOCK

   /* getgrent() has races with other threads concurrently executing any of:
    *            itself, endgrent(), getgrent_r(), or setgrent(). */
#  define GETGRENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETGRENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETGRENT_R_LOCK

   /* getgrent_r() has races with other threads concurrently executing any of:
    *              itself, endgrent(), getgrent(), or setgrent(). */
#  define GETGRENT_R_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETGRENT_R_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETGRGID_LOCK
#  define GETGRGID_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETGRGID_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETGRGID_R_LOCK
#  define GETGRGID_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETGRGID_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETGRNAM_LOCK
#  define GETGRNAM_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETGRNAM_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETGRNAM_R_LOCK
#  define GETGRNAM_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETGRNAM_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETGROUPLIST_LOCK
#  define GETGROUPLIST_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETGROUPLIST_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETHOSTBYADDR_LOCK

   /* gethostbyaddr() Obsolete; use getaddrinfo(); return needs a deep copy
    *                 for safety instead */
#  define GETHOSTBYADDR_LOCK    GENw_ENVr_LCr_LOCK_(LC_ALLb_)
#  define GETHOSTBYADDR_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETHOSTBYADDR_R_LOCK
#  define GETHOSTBYADDR_R_LOCK    ENVr_LCr_LOCK_(LC_ALLb_)
#  define GETHOSTBYADDR_R_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETHOSTBYNAME_LOCK

   /* gethostbyname() Obsolete; use getnameinfo() instead; return needs a deep
    *                 copy for safety */
#  define GETHOSTBYNAME_LOCK    GENw_ENVr_LCr_LOCK_(LC_ALLb_)
#  define GETHOSTBYNAME_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETHOSTBYNAME2_LOCK
#  define GETHOSTBYNAME2_LOCK    GENw_ENVr_LCr_LOCK_(LC_ALLb_)
#  define GETHOSTBYNAME2_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETHOSTBYNAME2_R_LOCK
#  define GETHOSTBYNAME2_R_LOCK    ENVr_LCr_LOCK_(LC_ALLb_)
#  define GETHOSTBYNAME2_R_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETHOSTBYNAME_R_LOCK
#  define GETHOSTBYNAME_R_LOCK    ENVr_LCr_LOCK_(LC_ALLb_)
#  define GETHOSTBYNAME_R_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETHOSTENT_LOCK

   /* gethostent() has races with other threads concurrently executing any of:
    *              itself, endhostent(), gethostent_r(), or sethostent(). */
#  define GETHOSTENT_LOCK    GENw_ENVr_LCr_LOCK_(LC_ALLb_)
#  define GETHOSTENT_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETHOSTENT_R_LOCK

   /* gethostent_r() has races with other threads concurrently executing any
    *                of: itself, endhostent(), gethostent(), or sethostent().
    */
#  define GETHOSTENT_R_LOCK    GENw_ENVr_LCr_LOCK_(LC_ALLb_)
#  define GETHOSTENT_R_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETHOSTID_LOCK
#  define GETHOSTID_LOCK    GENr_ENVr_LCr_LOCK_(LC_ALLb_)
#  define GETHOSTID_UNLOCK  GENr_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETLOGIN_LOCK

   /* getlogin() is vulnerable to signal ALRM
    * getlogin() has races with other threads concurrently executing any of:
    *            itself, endutent(), endutxent(), getlogin_r(), getutent(),
    *            getutid(), getutline(), getutxent(), getutxid(),
    *            getutxline(), glob(), login(), logout(), pututline(),
    *            pututxline(), setutent(), setutxent(), utmpname(), or
    *            wordexp(). */
#  define GETLOGIN_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETLOGIN_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETLOGIN_R_LOCK

   /* getlogin_r() is vulnerable to signal ALRM
    * getlogin_r() has races with other threads concurrently executing any of:
    *              itself, endutent(), endutxent(), getlogin(), getutent(),
    *              getutid(), getutline(), getutxent(), getutxid(),
    *              getutxline(), glob(), login(), logout(), pututline(),
    *              pututxline(), setutent(), setutxent(), utmpname(), or
    *              wordexp(). */
#  define GETLOGIN_R_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETLOGIN_R_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETMNTENT_LOCK
#  define GETMNTENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETMNTENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETMNTENT_R_LOCK
#  define GETMNTENT_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETMNTENT_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETNAMEINFO_LOCK
#  define GETNAMEINFO_LOCK    ENVr_LCr_LOCK_(LC_ALLb_)
#  define GETNAMEINFO_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETNETBYADDR_LOCK
#  define GETNETBYADDR_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETNETBYADDR_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETNETBYADDR_R_LOCK
#  define GETNETBYADDR_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETNETBYADDR_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETNETBYNAME_LOCK
#  define GETNETBYNAME_LOCK    GENw_ENVr_LCr_LOCK_(LC_ALLb_)
#  define GETNETBYNAME_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETNETBYNAME_R_LOCK
#  define GETNETBYNAME_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETNETBYNAME_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETNETENT_LOCK

   /* getnetent() has races with other threads concurrently executing any of:
    *             itself, endnetent(), or setnetent(). */
#  define GETNETENT_LOCK    GENw_ENVr_LCr_LOCK_(LC_ALLb_)
#  define GETNETENT_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETNETENT_R_LOCK
#  define GETNETENT_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETNETENT_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETNETGRENT_LOCK

   /* getnetgrent() has races with other threads concurrently executing any
    *               of: itself, endnetgrent(), getnetgrent_r(), innetgr(), or
    *               setnetgrent(). */
#  define GETNETGRENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETNETGRENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETNETGRENT_R_LOCK

   /* getnetgrent_r() has races with other threads concurrently executing any
    *                 of: itself, endnetgrent(), getnetgrent(), innetgr(), or
    *                 setnetgrent(). */
#  define GETNETGRENT_R_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETNETGRENT_R_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETOPT_LOCK

   /* getopt() has races with other threads concurrently executing any of:
    *          itself, getopt_long(), or getopt_long_only(). */
#  define GETOPT_LOCK    GENw_ENVr_LOCK_
#  define GETOPT_UNLOCK  GENw_ENVr_UNLOCK_
#endif

#ifndef GETOPT_LONG_LOCK

   /* getopt_long() has races with other threads concurrently executing any
    *               of: itself, getopt(), or getopt_long_only(). */
#  define GETOPT_LONG_LOCK    GENw_ENVr_LOCK_
#  define GETOPT_LONG_UNLOCK  GENw_ENVr_UNLOCK_
#endif

#ifndef GETOPT_LONG_ONLY_LOCK

   /* getopt_long_only() has races with other threads concurrently executing
    *                    any of: itself, getopt(), or getopt_long(). */
#  define GETOPT_LONG_ONLY_LOCK    GENw_ENVr_LOCK_
#  define GETOPT_LONG_ONLY_UNLOCK  GENw_ENVr_UNLOCK_
#endif

#ifndef GETPASS_LOCK

   /* getpass() Obsolete; DO NOT USE */
#  define GETPASS_LOCK    GENr_LOCK_
#  define GETPASS_UNLOCK  GENr_UNLOCK_
#endif

#ifndef GETPROTOBYNAME_LOCK
#  define GETPROTOBYNAME_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETPROTOBYNAME_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETPROTOBYNAME_R_LOCK
#  define GETPROTOBYNAME_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETPROTOBYNAME_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETPROTOBYNUMBER_LOCK
#  define GETPROTOBYNUMBER_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETPROTOBYNUMBER_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETPROTOBYNUMBER_R_LOCK
#  define GETPROTOBYNUMBER_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETPROTOBYNUMBER_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETPROTOENT_LOCK

   /* getprotoent() has races with other threads concurrently executing any
    *               of: itself, endprotoent(), or setprotoent(). */
#  define GETPROTOENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETPROTOENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETPROTOENT_R_LOCK
#  define GETPROTOENT_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETPROTOENT_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETPW_LOCK

   /* getpw() Obsolete; use getpwuid() instead */
#  define GETPW_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETPW_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETPWENT_LOCK

   /* getpwent() has races with other threads concurrently executing any of:
    *            itself, endpwent(), getpwent_r(), or setpwent(). */
#  define GETPWENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETPWENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETPWENT_R_LOCK

   /* getpwent_r() has races with other threads concurrently executing any of:
    *              itself, endpwent(), getpwent(), or setpwent(). */
#  define GETPWENT_R_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETPWENT_R_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETPWNAM_LOCK
#  define GETPWNAM_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETPWNAM_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETPWNAM_R_LOCK
#  define GETPWNAM_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETPWNAM_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETPWUID_LOCK
#  define GETPWUID_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETPWUID_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETPWUID_R_LOCK
#  define GETPWUID_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETPWUID_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETRPCBYNAME_LOCK
#  define GETRPCBYNAME_LOCK                              \
#    error getrpcbyname not suitable for multi-threaded operation
#endif

#ifndef GETRPCBYNAME_R_LOCK
#  define GETRPCBYNAME_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETRPCBYNAME_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETRPCBYNUMBER_LOCK
#  define GETRPCBYNUMBER_LOCK                              \
#    error getrpcbynumber not suitable for multi-threaded operation
#endif

#ifndef GETRPCBYNUMBER_R_LOCK
#  define GETRPCBYNUMBER_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETRPCBYNUMBER_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETRPCENT_LOCK
#  define GETRPCENT_LOCK                              \
#    error getrpcent not suitable for multi-threaded operation
#endif

#ifndef GETRPCENT_R_LOCK
#  define GETRPCENT_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETRPCENT_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETRPCPORT_LOCK
#  define GETRPCPORT_LOCK    ENVr_LCr_LOCK_(LC_ALLb_)
#  define GETRPCPORT_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETSERVBYNAME_LOCK
#  define GETSERVBYNAME_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETSERVBYNAME_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETSERVBYNAME_R_LOCK
#  define GETSERVBYNAME_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETSERVBYNAME_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETSERVBYPORT_LOCK
#  define GETSERVBYPORT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETSERVBYPORT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETSERVBYPORT_R_LOCK
#  define GETSERVBYPORT_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETSERVBYPORT_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETSERVENT_LOCK

   /* getservent() has races with other threads concurrently executing any of:
    *              itself, endservent(), or setservent(). */
#  define GETSERVENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETSERVENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETSERVENT_R_LOCK
#  define GETSERVENT_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETSERVENT_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETSPENT_LOCK

   /* getspent() has races with other threads concurrently executing any of:
    *            itself, endspent(), getspent_r(), or setspent(). */
#  define GETSPENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETSPENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETSPENT_R_LOCK

   /* getspent_r() has races with other threads concurrently executing any of:
    *              itself, endspent(), getspent(), or setspent(). */
#  define GETSPENT_R_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETSPENT_R_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETSPNAM_LOCK
#  define GETSPNAM_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define GETSPNAM_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETSPNAM_R_LOCK
#  define GETSPNAM_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GETSPNAM_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GETTTYENT_LOCK

   /* getttyent() has races with other threads concurrently executing any of:
    *             itself, endttyent(), getttynam(), or setttyent(). */
#  define GETTTYENT_LOCK    GENw_LOCK_
#  define GETTTYENT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef GETTTYNAM_LOCK

   /* getttynam() has races with other threads concurrently executing any of:
    *             itself, endttyent(), getttyent(), or setttyent(). */
#  define GETTTYNAM_LOCK    GENw_LOCK_
#  define GETTTYNAM_UNLOCK  GENw_UNLOCK_
#endif

#ifndef GETUSERSHELL_LOCK
#  define GETUSERSHELL_LOCK                              \
#    error getusershell not suitable for multi-threaded operation
#endif

#ifndef GETUTENT_LOCK

   /* getutent() must be called at least once in single-threaded mode to
    *            enable thread-safety in subsequent calls when in
    *            multi-threaded mode.
    * getutent() Obsolete; use getutxent() instead
    * getutent() is vulnerable to signal ALRM
    * getutent() has races with other threads concurrently executing any of:
    *            itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *            getutid(), getutline(), getutxent(), getutxid(),
    *            getutxline(), glob(), login(), logout(), pututline(),
    *            pututxline(), setutent(), setutxent(), utmpname(), or
    *            wordexp(). */
#  define GETUTENT_LOCK    GENw_LOCK_
#  define GETUTENT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef GETUTID_LOCK

   /* getutid() must be called at least once in single-threaded mode to enable
    *           thread-safety in subsequent calls when in multi-threaded mode.
    * getutid() is vulnerable to signal ALRM
    * getutid() has races with other threads concurrently executing any of:
    *           itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *           getutent(), getutline(), getutxent(), getutxid(),
    *           getutxline(), glob(), login(), logout(), pututline(),
    *           pututxline(), setutent(), setutxent(), utmpname(), or
    *           wordexp(). */
#  define GETUTID_LOCK    GENw_LOCK_
#  define GETUTID_UNLOCK  GENw_UNLOCK_
#endif

#ifndef GETUTLINE_LOCK

   /* getutline() must be called at least once in single-threaded mode to
    *             enable thread-safety in subsequent calls when in
    *             multi-threaded mode.
    * getutline() Obsolete; use getutxline() instead
    * getutline() is vulnerable to signal ALRM
    * getutline() has races with other threads concurrently executing any of:
    *             itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *             getutent(), getutid(), getutxent(), getutxid(),
    *             getutxline(), glob(), login(), logout(), pututline(),
    *             pututxline(), setutent(), setutxent(), utmpname(), or
    *             wordexp(). */
#  define GETUTLINE_LOCK    GENw_LOCK_
#  define GETUTLINE_UNLOCK  GENw_UNLOCK_
#endif

#ifndef GETUTXENT_LOCK

   /* getutxent() must be called at least once in single-threaded mode to
    *             enable thread-safety in subsequent calls when in
    *             multi-threaded mode.
    * getutxent() is vulnerable to signal ALRM
    * getutxent() has races with other threads concurrently executing any of:
    *             itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *             getutent(), getutid(), getutline(), getutxid(),
    *             getutxline(), glob(), login(), logout(), pututline(),
    *             pututxline(), setutent(), setutxent(), utmpname(), or
    *             wordexp(). */
#  define GETUTXENT_LOCK    GENw_LOCK_
#  define GETUTXENT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef GETUTXID_LOCK

   /* getutxid() must be called at least once in single-threaded mode to
    *            enable thread-safety in subsequent calls when in
    *            multi-threaded mode.
    * getutxid() is vulnerable to signal ALRM
    * getutxid() has races with other threads concurrently executing any of:
    *            itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *            getutent(), getutid(), getutline(), getutxent(),
    *            getutxline(), glob(), login(), logout(), pututline(),
    *            pututxline(), setutent(), setutxent(), utmpname(), or
    *            wordexp(). */
#  define GETUTXID_LOCK    GENw_LOCK_
#  define GETUTXID_UNLOCK  GENw_UNLOCK_
#endif

#ifndef GETUTXLINE_LOCK

   /* getutxline() must be called at least once in single-threaded mode to
    *              enable thread-safety in subsequent calls when in
    *              multi-threaded mode.
    * getutxline() is vulnerable to signal ALRM
    * getutxline() has races with other threads concurrently executing any of:
    *              itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *              getutent(), getutid(), getutline(), getutxent(),
    *              getutxid(), glob(), login(), logout(), pututline(),
    *              pututxline(), setutent(), setutxent(), utmpname(), or
    *              wordexp(). */
#  define GETUTXLINE_LOCK    GENw_LOCK_
#  define GETUTXLINE_UNLOCK  GENw_UNLOCK_
#endif

#ifndef GETWC_LOCK
#  define GETWC_LOCK    NOOP
#  define GETWC_UNLOCK  NOOP
#endif

#ifndef GETWCHAR_LOCK
#  define GETWCHAR_LOCK    NOOP
#  define GETWCHAR_UNLOCK  NOOP
#endif

#ifndef GETWCHAR_UNLOCKED_LOCK

   /* getwchar_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                     locked stdin, but should not be used since not
    *                     standardized and not widely implemented
    * getwchar_unlocked() has races with other threads concurrently executing
    *                     either itself or getchar_unlocked. */
#  define GETWCHAR_UNLOCKED_LOCK    GENw_LOCK_
#  define GETWCHAR_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef GETWC_UNLOCKED_LOCK

   /* getwc_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                  locked the stream, but should not be used since not
    *                  standardized and not widely implemented
    * getwc_unlocked() has races with other threads concurrently executing any
    *                  of: itself, addmntent(), clearerr_unlocked(),
    *                  __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                  fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *                  __fpending(), __fpurge(), fputc_unlocked(),
    *                  fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(),
    *                  fread_unlocked(), __fsetlocking(), fwrite_unlocked(),
    *                  getc_unlocked(), putc_unlocked(), or putwc_unlocked().
    */
#  define GETWC_UNLOCKED_LOCK    GENw_LOCK_
#  define GETWC_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef GLOB_LOCK

   /* glob() is vulnerable to signal ALRM
    * glob() has races with other threads concurrently executing any of:
    *        itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *        getutent(), getutid(), getutline(), getutxent(), getutxid(),
    *        getutxline(), login(), logout(), pututline(), pututxline(),
    *        setutent(), setutxent(), utmpname(), or wordexp(). */
#  define GLOB_LOCK    GENw_ENVr_LCr_LOCK_(LC_COLLATEb_)
#  define GLOB_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_COLLATEb_)
#endif

#ifndef GMTIME_LOCK

   /* gmtime() has races with other threads concurrently executing any of:
    *          itself, ctime(), or localtime(). */
#  define GMTIME_LOCK    GENw_ENVr_LCr_LOCK_(LC_ALLb_)
#  define GMTIME_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GMTIME_R_LOCK
#  define GMTIME_R_LOCK    ENVr_LCr_LOCK_(LC_ALLb_)
#  define GMTIME_R_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef GRANTPT_LOCK
#  define GRANTPT_LOCK    LCr_LOCK_(LC_ALLb_)
#  define GRANTPT_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef HCREATE_LOCK

   /* hcreate() has races with other threads concurrently executing any of:
    *           itself, hdestroy(), or hsearch(). */
#  define HCREATE_LOCK    GENw_LOCK_
#  define HCREATE_UNLOCK  GENw_UNLOCK_
#endif

#ifndef HCREATE_R_LOCK

   /* hcreate_r() has races with other threads concurrently executing any of:
    *             itself, hdestroy_r(), or hsearch_r(). */
#  define HCREATE_R_LOCK    GENw_LOCK_
#  define HCREATE_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef HDESTROY_LOCK

   /* hdestroy() has races with other threads concurrently executing any of:
    *            itself, hcreate(), or hsearch(). */
#  define HDESTROY_LOCK    GENw_LOCK_
#  define HDESTROY_UNLOCK  GENw_UNLOCK_
#endif

#ifndef HDESTROY_R_LOCK

   /* hdestroy_r() has races with other threads concurrently executing any of:
    *              itself, hcreate_r(), or hsearch_r(). */
#  define HDESTROY_R_LOCK    GENw_LOCK_
#  define HDESTROY_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef HSEARCH_LOCK

   /* hsearch() has races with other threads concurrently executing any of:
    *           itself, hcreate(), or hdestroy(). */
#  define HSEARCH_LOCK    GENw_LOCK_
#  define HSEARCH_UNLOCK  GENw_UNLOCK_
#endif

#ifndef HSEARCH_R_LOCK

   /* hsearch_r() has races with other threads concurrently executing any of:
    *             itself, hcreate_r(), or hdestroy_r(). */
#  define HSEARCH_R_LOCK    GENw_LOCK_
#  define HSEARCH_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef ICONV_LOCK
#  define ICONV_LOCK    GENw_LOCK_
#  define ICONV_UNLOCK  GENw_UNLOCK_
#endif

#ifndef ICONV_OPEN_LOCK
#  define ICONV_OPEN_LOCK    LCr_LOCK_(LC_ALLb_)
#  define ICONV_OPEN_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef INET_ADDR_LOCK
#  define INET_ADDR_LOCK    LCr_LOCK_(LC_ALLb_)
#  define INET_ADDR_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef INET_ATON_LOCK
#  define INET_ATON_LOCK    LCr_LOCK_(LC_ALLb_)
#  define INET_ATON_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef INET_NETWORK_LOCK
#  define INET_NETWORK_LOCK    LCr_LOCK_(LC_ALLb_)
#  define INET_NETWORK_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef INET_NTOA_LOCK
#  define INET_NTOA_LOCK    LCr_LOCK_(LC_ALLb_)
#  define INET_NTOA_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef INET_NTOP_LOCK
#  define INET_NTOP_LOCK    LCr_LOCK_(LC_ALLb_)
#  define INET_NTOP_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef INET_PTON_LOCK
#  define INET_PTON_LOCK    LCr_LOCK_(LC_ALLb_)
#  define INET_PTON_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef INITGROUPS_LOCK
#  define INITGROUPS_LOCK    LCr_LOCK_(LC_ALLb_)
#  define INITGROUPS_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef INITSTATE_R_LOCK

   /* initstate_r() has races with other threads concurrently executing any
    *               of: itself, random_r(), setstate_r(), or srandom_r(). */
#  define INITSTATE_R_LOCK    GENw_LOCK_
#  define INITSTATE_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef INNETGR_LOCK

   /* innetgr() has races with other threads concurrently executing any of:
    *           itself, endnetgrent(), getnetgrent(), getnetgrent_r(), or
    *           setnetgrent(). */
#  define INNETGR_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define INNETGR_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef IRUSEROK_LOCK
#  define IRUSEROK_LOCK    LCr_LOCK_(LC_ALLb_)
#  define IRUSEROK_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef IRUSEROK_AF_LOCK
#  define IRUSEROK_AF_LOCK    LCr_LOCK_(LC_ALLb_)
#  define IRUSEROK_AF_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef ISALNUM_LOCK

   /* isalnum() Use a Perl isALNUM family macro instead */
#  define ISALNUM_LOCK    NOOP
#  define ISALNUM_UNLOCK  NOOP
#endif

#ifndef ISALNUM_L_LOCK
#  define ISALNUM_L_LOCK    NOOP
#  define ISALNUM_L_UNLOCK  NOOP
#endif

#ifndef ISALPHA_LOCK

   /* isalpha() Use a Perl isALPHA family macro instead */
#  define ISALPHA_LOCK    NOOP
#  define ISALPHA_UNLOCK  NOOP
#endif

#ifndef ISALPHA_L_LOCK
#  define ISALPHA_L_LOCK    NOOP
#  define ISALPHA_L_UNLOCK  NOOP
#endif

#ifndef ISASCII_LOCK

   /* isascii() Considered obsolete as being non-portable by POSIX, but Perl
    *           makes it portable by using an isASCII family macro */
#  define ISASCII_LOCK    NOOP
#  define ISASCII_UNLOCK  NOOP
#endif

#ifndef ISASCII_L_LOCK
#  define ISASCII_L_LOCK    NOOP
#  define ISASCII_L_UNLOCK  NOOP
#endif

#ifndef ISBLANK_LOCK

   /* isblank() Use a Perl isBLANK family macro instead */
#  define ISBLANK_LOCK    NOOP
#  define ISBLANK_UNLOCK  NOOP
#endif

#ifndef ISBLANK_L_LOCK
#  define ISBLANK_L_LOCK    NOOP
#  define ISBLANK_L_UNLOCK  NOOP
#endif

#ifndef ISCNTRL_LOCK

   /* iscntrl() Use a Perl isCNTRL family macro instead */
#  define ISCNTRL_LOCK    NOOP
#  define ISCNTRL_UNLOCK  NOOP
#endif

#ifndef ISCNTRL_L_LOCK
#  define ISCNTRL_L_LOCK    NOOP
#  define ISCNTRL_L_UNLOCK  NOOP
#endif

#ifndef ISDIGIT_LOCK

   /* isdigit() Use a Perl isDIGIT family macro instead */
#  define ISDIGIT_LOCK    NOOP
#  define ISDIGIT_UNLOCK  NOOP
#endif

#ifndef ISDIGIT_L_LOCK
#  define ISDIGIT_L_LOCK    NOOP
#  define ISDIGIT_L_UNLOCK  NOOP
#endif

#ifndef ISGRAPH_LOCK

   /* isgraph() Use a Perl isGRAPH family macro instead */
#  define ISGRAPH_LOCK    NOOP
#  define ISGRAPH_UNLOCK  NOOP
#endif

#ifndef ISGRAPH_L_LOCK
#  define ISGRAPH_L_LOCK    NOOP
#  define ISGRAPH_L_UNLOCK  NOOP
#endif

#ifndef ISLOWER_LOCK

   /* islower() Use a Perl isLOWER family macro instead */
#  define ISLOWER_LOCK    NOOP
#  define ISLOWER_UNLOCK  NOOP
#endif

#ifndef ISLOWER_L_LOCK
#  define ISLOWER_L_LOCK    NOOP
#  define ISLOWER_L_UNLOCK  NOOP
#endif

#ifndef ISPRINT_LOCK

   /* isprint() Use a Perl isPRINT family macro instead */
#  define ISPRINT_LOCK    NOOP
#  define ISPRINT_UNLOCK  NOOP
#endif

#ifndef ISPRINT_L_LOCK
#  define ISPRINT_L_LOCK    NOOP
#  define ISPRINT_L_UNLOCK  NOOP
#endif

#ifndef ISPUNCT_LOCK

   /* ispunct() Use a Perl isPUNCT family macro instead */
#  define ISPUNCT_LOCK    NOOP
#  define ISPUNCT_UNLOCK  NOOP
#endif

#ifndef ISPUNCT_L_LOCK
#  define ISPUNCT_L_LOCK    NOOP
#  define ISPUNCT_L_UNLOCK  NOOP
#endif

#ifndef ISSPACE_LOCK

   /* isspace() Use a Perl isSPACE family macro instead */
#  define ISSPACE_LOCK    NOOP
#  define ISSPACE_UNLOCK  NOOP
#endif

#ifndef ISSPACE_L_LOCK
#  define ISSPACE_L_LOCK    NOOP
#  define ISSPACE_L_UNLOCK  NOOP
#endif

#ifndef ISUPPER_LOCK

   /* isupper() Use a Perl isUPPER family macro instead */
#  define ISUPPER_LOCK    NOOP
#  define ISUPPER_UNLOCK  NOOP
#endif

#ifndef ISUPPER_L_LOCK
#  define ISUPPER_L_LOCK    NOOP
#  define ISUPPER_L_UNLOCK  NOOP
#endif

#ifndef ISWALNUM_LOCK

   /* iswalnum() Use a Perl isALNUM family macro instead */
#  define ISWALNUM_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWALNUM_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWALNUM_L_LOCK
#  define ISWALNUM_L_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWALNUM_L_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWALPHA_LOCK

   /* iswalpha() Use a Perl isALPHA family macro instead */
#  define ISWALPHA_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWALPHA_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWALPHA_L_LOCK
#  define ISWALPHA_L_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWALPHA_L_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWBLANK_LOCK

   /* iswblank() Use a Perl isBLANK family macro instead */
#  define ISWBLANK_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWBLANK_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWBLANK_L_LOCK
#  define ISWBLANK_L_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWBLANK_L_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWCNTRL_LOCK

   /* iswcntrl() Use a Perl isCNTRL family macro instead */
#  define ISWCNTRL_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWCNTRL_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWCNTRL_L_LOCK
#  define ISWCNTRL_L_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWCNTRL_L_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWDIGIT_LOCK

   /* iswdigit() Use a Perl isDIGIT family macro instead */
#  define ISWDIGIT_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWDIGIT_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWDIGIT_L_LOCK
#  define ISWDIGIT_L_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWDIGIT_L_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWGRAPH_LOCK

   /* iswgraph() Use a Perl isGRAPH family macro instead */
#  define ISWGRAPH_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWGRAPH_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWGRAPH_L_LOCK
#  define ISWGRAPH_L_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWGRAPH_L_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWLOWER_LOCK

   /* iswlower() Use a Perl isLOWER family macro instead */
#  define ISWLOWER_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWLOWER_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWLOWER_L_LOCK
#  define ISWLOWER_L_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWLOWER_L_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWPRINT_LOCK

   /* iswprint() Use a Perl isPRINT family macro instead */
#  define ISWPRINT_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWPRINT_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWPRINT_L_LOCK
#  define ISWPRINT_L_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWPRINT_L_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWPUNCT_LOCK

   /* iswpunct() Use a Perl isPUNCT family macro instead */
#  define ISWPUNCT_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWPUNCT_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWPUNCT_L_LOCK
#  define ISWPUNCT_L_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWPUNCT_L_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWSPACE_LOCK

   /* iswspace() Use a Perl isSPACE family macro instead */
#  define ISWSPACE_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWSPACE_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWSPACE_L_LOCK
#  define ISWSPACE_L_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWSPACE_L_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWUPPER_LOCK

   /* iswupper() Use a Perl isUPPER family macro instead */
#  define ISWUPPER_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWUPPER_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWUPPER_L_LOCK
#  define ISWUPPER_L_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWUPPER_L_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWXDIGIT_LOCK

   /* iswxdigit() Use a Perl isXDIGIT family macro instead */
#  define ISWXDIGIT_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWXDIGIT_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISWXDIGIT_L_LOCK
#  define ISWXDIGIT_L_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define ISWXDIGIT_L_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef ISXDIGIT_LOCK

   /* isxdigit() Use a Perl isXDIGIT family macro instead */
#  define ISXDIGIT_LOCK    NOOP
#  define ISXDIGIT_UNLOCK  NOOP
#endif

#ifndef ISXDIGIT_L_LOCK
#  define ISXDIGIT_L_LOCK    NOOP
#  define ISXDIGIT_L_UNLOCK  NOOP
#endif

#ifndef JRAND48_LOCK

   /* jrand48() has races with other threads concurrently executing any of:
    *           itself, drand48(), erand48(), lcong48(), lrand48(), mrand48(),
    *           nrand48(), seed48(), or srand48(). */
#  define JRAND48_LOCK    GENw_LOCK_
#  define JRAND48_UNLOCK  GENw_UNLOCK_
#endif

#ifndef JRAND48_R_LOCK

   /* jrand48_r() has races with other threads concurrently executing any of:
    *             itself, drand48_r(), erand48_r(), lcong48_r(), lrand48_r(),
    *             mrand48_r(), nrand48_r(), seed48_r(), or srand48_r(). */
#  define JRAND48_R_LOCK    GENw_LOCK_
#  define JRAND48_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef L64A_LOCK
#  define L64A_LOCK    GENw_LOCK_
#  define L64A_UNLOCK  GENw_UNLOCK_
#endif

#ifndef LCONG48_LOCK

   /* lcong48() has races with other threads concurrently executing any of:
    *           itself, drand48(), erand48(), jrand48(), lrand48(), mrand48(),
    *           nrand48(), seed48(), or srand48(). */
#  define LCONG48_LOCK    GENw_LOCK_
#  define LCONG48_UNLOCK  GENw_UNLOCK_
#endif

#ifndef LCONG48_R_LOCK

   /* lcong48_r() has races with other threads concurrently executing any of:
    *             itself, drand48_r(), erand48_r(), jrand48_r(), lrand48_r(),
    *             mrand48_r(), nrand48_r(), seed48_r(), or srand48_r(). */
#  define LCONG48_R_LOCK    GENw_LOCK_
#  define LCONG48_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef LGAMMA_LOCK

   /* lgamma() has races with other threads concurrently executing any of:
    *          itself, gamma(), gammaf(), gammal(), lgammaf(), or lgammal(). */
#  define LGAMMA_LOCK    GENw_LOCK_
#  define LGAMMA_UNLOCK  GENw_UNLOCK_
#endif

#ifndef LGAMMAF_LOCK

   /* lgammaf() has races with other threads concurrently executing any of:
    *           itself, gamma(), gammaf(), gammal(), lgamma(), or lgammal(). */
#  define LGAMMAF_LOCK    GENw_LOCK_
#  define LGAMMAF_UNLOCK  GENw_UNLOCK_
#endif

#ifndef LGAMMAL_LOCK

   /* lgammal() has races with other threads concurrently executing any of:
    *           itself, gamma(), gammaf(), gammal(), lgamma(), or lgammaf(). */
#  define LGAMMAL_LOCK    GENw_LOCK_
#  define LGAMMAL_UNLOCK  GENw_UNLOCK_
#endif

#ifndef LOCALECONV_LOCK

   /* localeconv() Use Perl_localeconv() instead */
#  define LOCALECONV_LOCK    GENw_LCr_LOCK_(LC_NUMERICb_|LC_MONETARYb_)
#  define LOCALECONV_UNLOCK  GENw_LCr_UNLOCK_(LC_NUMERICb_|LC_MONETARYb_)
#endif

#ifndef LOCALTIME_LOCK

   /* localtime() has races with other threads concurrently executing any of:
    *             itself, ctime(), or gmtime(). */
#  define LOCALTIME_LOCK    GENw_ENVr_LCr_LOCK_(LC_ALLb_)
#  define LOCALTIME_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef LOCALTIME_R_LOCK
#  define LOCALTIME_R_LOCK    GENw_ENVr_LCr_LOCK_(LC_ALLb_)
#  define LOCALTIME_R_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef LOGIN_LOCK

   /* login() Not in POSIX Standard
    * login() is vulnerable to signal ALRM
    * login() has races with other threads concurrently executing any of:
    *         itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *         getutent(), getutid(), getutline(), getutxent(), getutxid(),
    *         getutxline(), glob(), logout(), pututline(), pututxline(),
    *         setutent(), setutxent(), utmpname(), or wordexp(). */
#  define LOGIN_LOCK    GENw_LOCK_
#  define LOGIN_UNLOCK  GENw_UNLOCK_
#endif

#ifndef LOGIN_TTY_LOCK

   /* login_tty() has races with other threads concurrently executing either
    *             itself or ttyname. */
#  define LOGIN_TTY_LOCK    GENw_LOCK_
#  define LOGIN_TTY_UNLOCK  GENw_UNLOCK_
#endif

#ifndef LOGOUT_LOCK

   /* logout() Not in POSIX Standard
    * logout() is vulnerable to signal ALRM
    * logout() has races with other threads concurrently executing any of:
    *          itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *          getutent(), getutid(), getutline(), getutxent(), getutxid(),
    *          getutxline(), glob(), login(), pututline(), pututxline(),
    *          setutent(), setutxent(), utmpname(), or wordexp(). */
#  define LOGOUT_LOCK    GENw_LOCK_
#  define LOGOUT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef LOGWTMP_LOCK

   /* logwtmp() Not in POSIX Standard
    * logwtmp() is vulnerable to signal ALRM */
#  define LOGWTMP_LOCK    NOOP
#  define LOGWTMP_UNLOCK  NOOP
#endif

#ifndef LRAND48_LOCK

   /* lrand48() has races with other threads concurrently executing any of:
    *           itself, drand48(), erand48(), jrand48(), lcong48(), mrand48(),
    *           nrand48(), seed48(), or srand48(). */
#  define LRAND48_LOCK    GENw_LOCK_
#  define LRAND48_UNLOCK  GENw_UNLOCK_
#endif

#ifndef LRAND48_R_LOCK

   /* lrand48_r() has races with other threads concurrently executing any of:
    *             itself, drand48_r(), erand48_r(), jrand48_r(), lcong48_r(),
    *             mrand48_r(), nrand48_r(), seed48_r(), or srand48_r(). */
#  define LRAND48_R_LOCK    GENw_LOCK_
#  define LRAND48_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef MAKECONTEXT_LOCK

   /* makecontext() has races with other threads concurrently executing any
    *               of: itself, getcontext(), setcontext(), or swapcontext().
    */
#  define MAKECONTEXT_LOCK    GENw_LOCK_
#  define MAKECONTEXT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef MALLINFO_LOCK

   /* mallinfo() must be called at least once in single-threaded mode to
    *            enable thread-safety in subsequent calls when in
    *            multi-threaded mode. */
#  define MALLINFO_LOCK    GENw_LOCK_
#  define MALLINFO_UNLOCK  GENw_UNLOCK_
#endif

#ifndef MB_CUR_MAX_LOCK
#  define MB_CUR_MAX_LOCK    NOOP
#  define MB_CUR_MAX_UNLOCK  NOOP
#endif

#ifndef MBLEN_LOCK
#  define MBLEN_LOCK    GENw_LCr_LOCK_(LC_CTYPEb_)
#  define MBLEN_UNLOCK  GENw_LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef MBRLEN_LOCK

   /* mbrlen() macros only valid if !ps */
#  define MBRLEN_LOCK    NOOP
#  define MBRLEN_UNLOCK  NOOP
#endif

#ifndef MBRTOWC_LOCK

   /* mbrtowc() macros only valid if !ps */
#  define MBRTOWC_LOCK    NOOP
#  define MBRTOWC_UNLOCK  NOOP
#endif

#ifndef MBSINIT_LOCK
#  define MBSINIT_LOCK    NOOP
#  define MBSINIT_UNLOCK  NOOP
#endif

#ifndef MBSNRTOWCS_LOCK

   /* mbsnrtowcs() macros only valid if !ps */
#  define MBSNRTOWCS_LOCK    NOOP
#  define MBSNRTOWCS_UNLOCK  NOOP
#endif

#ifndef MBSRTOWCS_LOCK

   /* mbsrtowcs() macros only valid if !ps */
#  define MBSRTOWCS_LOCK    NOOP
#  define MBSRTOWCS_UNLOCK  NOOP
#endif

#ifndef MBSTOWCS_LOCK
#  define MBSTOWCS_LOCK    NOOP
#  define MBSTOWCS_UNLOCK  NOOP
#endif

#ifndef MBTOWC_LOCK
#  define MBTOWC_LOCK    GENw_LCr_LOCK_(LC_CTYPEb_)
#  define MBTOWC_UNLOCK  GENw_LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef MCHECK_LOCK

   /* mcheck() has races with other threads concurrently executing any of:
    *          itself, mcheck_check_all(), mcheck_pedantic(), or mprobe(). */
#  define MCHECK_LOCK    GENw_LOCK_
#  define MCHECK_UNLOCK  GENw_UNLOCK_
#endif

#ifndef MCHECK_CHECK_ALL_LOCK

   /* mcheck_check_all() has races with other threads concurrently executing
    *                    any of: itself, mcheck(), mcheck_pedantic(), or
    *                    mprobe(). */
#  define MCHECK_CHECK_ALL_LOCK    GENw_LOCK_
#  define MCHECK_CHECK_ALL_UNLOCK  GENw_UNLOCK_
#endif

#ifndef MCHECK_PEDANTIC_LOCK

   /* mcheck_pedantic() has races with other threads concurrently executing
    *                   any of: itself, mcheck(), mcheck_check_all(), or
    *                   mprobe(). */
#  define MCHECK_PEDANTIC_LOCK    GENw_LOCK_
#  define MCHECK_PEDANTIC_UNLOCK  GENw_UNLOCK_
#endif

#ifndef MKTIME_LOCK
#  define MKTIME_LOCK    GENw_ENVr_LCr_LOCK_(LC_ALLb_)
#  define MKTIME_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef MPROBE_LOCK

   /* mprobe() has races with other threads concurrently executing any of:
    *          itself, mcheck(), mcheck_check_all(), or mcheck_pedantic(). */
#  define MPROBE_LOCK    GENw_LOCK_
#  define MPROBE_UNLOCK  GENw_UNLOCK_
#endif

#ifndef MRAND48_LOCK

   /* mrand48() has races with other threads concurrently executing any of:
    *           itself, drand48(), erand48(), jrand48(), lcong48(), lrand48(),
    *           nrand48(), seed48(), or srand48(). */
#  define MRAND48_LOCK    GENw_LOCK_
#  define MRAND48_UNLOCK  GENw_UNLOCK_
#endif

#ifndef MRAND48_R_LOCK

   /* mrand48_r() has races with other threads concurrently executing any of:
    *             itself, drand48_r(), erand48_r(), jrand48_r(), lcong48_r(),
    *             lrand48_r(), nrand48_r(), seed48_r(), or srand48_r(). */
#  define MRAND48_R_LOCK    GENw_LOCK_
#  define MRAND48_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef MTRACE_LOCK
#  define MTRACE_LOCK                              \
#    error mtrace not suitable for multi-threaded operation
#endif

#ifndef MUNTRACE_LOCK
#  define MUNTRACE_LOCK                              \
#    error muntrace not suitable for multi-threaded operation
#endif

#ifndef NAN_LOCK
#  define NAN_LOCK    LCr_LOCK_(LC_ALLb_)
#  define NAN_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef NANF_LOCK
#  define NANF_LOCK    LCr_LOCK_(LC_ALLb_)
#  define NANF_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef NANL_LOCK
#  define NANL_LOCK    LCr_LOCK_(LC_ALLb_)
#  define NANL_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef NEWLOCALE_LOCK
#  define NEWLOCALE_LOCK    ENVr_LOCK_
#  define NEWLOCALE_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef NFTW_LOCK

   /* nftw() chdir() in another thread will mess this up */
#  define NFTW_LOCK    GENr_LOCK_
#  define NFTW_UNLOCK  GENr_UNLOCK_
#endif

#ifndef NL_LANGINFO_LOCK
#  define NL_LANGINFO_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define NL_LANGINFO_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef NRAND48_LOCK

   /* nrand48() has races with other threads concurrently executing any of:
    *           itself, drand48(), erand48(), jrand48(), lcong48(), lrand48(),
    *           mrand48(), seed48(), or srand48(). */
#  define NRAND48_LOCK    GENw_LOCK_
#  define NRAND48_UNLOCK  GENw_UNLOCK_
#endif

#ifndef NRAND48_R_LOCK

   /* nrand48_r() has races with other threads concurrently executing any of:
    *             itself, drand48_r(), erand48_r(), jrand48_r(), lcong48_r(),
    *             lrand48_r(), mrand48_r(), seed48_r(), or srand48_r(). */
#  define NRAND48_R_LOCK    GENw_LOCK_
#  define NRAND48_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef OPENPTY_LOCK
#  define OPENPTY_LOCK    LCr_LOCK_(LC_ALLb_)
#  define OPENPTY_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef PERROR_LOCK
#  define PERROR_LOCK    GENw_LOCK_
#  define PERROR_UNLOCK  GENw_UNLOCK_
#endif

#ifndef POSIX_FALLOCATE_LOCK

   /* posix_fallocate() The safety in glibc depends on the file system. 
    *                   Generally safe */
#  define POSIX_FALLOCATE_LOCK    NOOP
#  define POSIX_FALLOCATE_UNLOCK  NOOP
#endif

#ifndef PRINTF_LOCK
#  define PRINTF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define PRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef PROFIL_LOCK
#  define PROFIL_LOCK                              \
#    error profil not suitable for multi-threaded operation
#endif

#ifndef PSIGINFO_LOCK
#  define PSIGINFO_LOCK    LCr_LOCK_(LC_ALLb_)
#  define PSIGINFO_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef PSIGNAL_LOCK
#  define PSIGNAL_LOCK    LCr_LOCK_(LC_ALLb_)
#  define PSIGNAL_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef PTSNAME_LOCK
#  define PTSNAME_LOCK    GENw_LOCK_
#  define PTSNAME_UNLOCK  GENw_UNLOCK_
#endif

#ifndef PUTCHAR_UNLOCKED_LOCK

   /* putchar_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                    locked stdin
    * putchar_unlocked() has races with other threads concurrently executing
    *                    either itself or putwchar_unlocked. */
#  define PUTCHAR_UNLOCKED_LOCK    GENw_LOCK_
#  define PUTCHAR_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef PUTC_UNLOCKED_LOCK

   /* putc_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                 locked the stream
    * putc_unlocked() has races with other threads concurrently executing any
    *                 of: itself, addmntent(), clearerr_unlocked(),
    *                 __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                 fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *                 __fpending(), __fpurge(), fputc_unlocked(),
    *                 fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(),
    *                 fread_unlocked(), __fsetlocking(), fwrite_unlocked(),
    *                 getc_unlocked(), getwc_unlocked(), or putwc_unlocked().
    */
#  define PUTC_UNLOCKED_LOCK    GENw_LOCK_
#  define PUTC_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef PUTENV_LOCK
#  define PUTENV_LOCK    ENVw_LOCK_
#  define PUTENV_UNLOCK  ENVw_UNLOCK_
#endif

#ifndef PUTPWENT_LOCK
#  define PUTPWENT_LOCK    LCr_LOCK_(LC_ALLb_)
#  define PUTPWENT_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef PUTSPENT_LOCK
#  define PUTSPENT_LOCK    LCr_LOCK_(LC_ALLb_)
#  define PUTSPENT_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef PUTUTLINE_LOCK

   /* pututline() Obsolete; use pututxline() instead
    * pututline() is vulnerable to signal ALRM
    * pututline() has races with other threads concurrently executing any of:
    *             itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *             getutent(), getutid(), getutline(), getutxent(), getutxid(),
    *             getutxline(), glob(), login(), logout(), pututxline(),
    *             setutent(), setutxent(), utmpname(), or wordexp(). */
#  define PUTUTLINE_LOCK    GENw_LOCK_
#  define PUTUTLINE_UNLOCK  GENw_UNLOCK_
#endif

#ifndef PUTUTXLINE_LOCK

   /* pututxline() is vulnerable to signal ALRM
    * pututxline() has races with other threads concurrently executing any of:
    *              itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *              getutent(), getutid(), getutline(), getutxent(),
    *              getutxid(), getutxline(), glob(), login(), logout(),
    *              pututline(), setutent(), setutxent(), utmpname(), or
    *              wordexp(). */
#  define PUTUTXLINE_LOCK    GENw_LOCK_
#  define PUTUTXLINE_UNLOCK  GENw_UNLOCK_
#endif

#ifndef PUTWC_LOCK
#  define PUTWC_LOCK    NOOP
#  define PUTWC_UNLOCK  NOOP
#endif

#ifndef PUTWCHAR_LOCK
#  define PUTWCHAR_LOCK    NOOP
#  define PUTWCHAR_UNLOCK  NOOP
#endif

#ifndef PUTWCHAR_UNLOCKED_LOCK

   /* putwchar_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                     locked stdout, but should not be used since not
    *                     standardized and not widely implemented
    * putwchar_unlocked() has races with other threads concurrently executing
    *                     either itself or putchar_unlocked. */
#  define PUTWCHAR_UNLOCKED_LOCK    GENw_LOCK_
#  define PUTWCHAR_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef PUTWC_UNLOCKED_LOCK

   /* putwc_unlocked() Is thread-safe if flockfile() or ftrylockfile() have
    *                  locked the stream, but should not be used since not
    *                  standardized and not widely implemented
    * putwc_unlocked() has races with other threads concurrently executing any
    *                  of: itself, addmntent(), clearerr_unlocked(),
    *                  __fbufsize(), fflush_unlocked(), fgetc_unlocked(),
    *                  fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(),
    *                  __fpending(), __fpurge(), fputc_unlocked(),
    *                  fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(),
    *                  fread_unlocked(), __fsetlocking(), fwrite_unlocked(),
    *                  getc_unlocked(), getwc_unlocked(), or putc_unlocked().
    */
#  define PUTWC_UNLOCKED_LOCK    GENw_LOCK_
#  define PUTWC_UNLOCKED_UNLOCK  GENw_UNLOCK_
#endif

#ifndef PVALLOC_LOCK

   /* pvalloc() must be called at least once in single-threaded mode to enable
    *           thread-safety in subsequent calls when in multi-threaded mode.
    */
#  define PVALLOC_LOCK    NOOP
#  define PVALLOC_UNLOCK  NOOP
#endif

#ifndef QECVT_LOCK

   /* qecvt() Obsolete; use snprintf() instead */
#  define QECVT_LOCK    GENw_LOCK_
#  define QECVT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef QFCVT_LOCK

   /* qfcvt() Obsolete; use snprintf() instead */
#  define QFCVT_LOCK    GENw_LOCK_
#  define QFCVT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef RAND_LOCK
#  ifndef __GLIBC__

     /* rand() Problematic and should be avoided; See POSIX Standard */
#    define RAND_LOCK    NOOP
#    define RAND_UNLOCK  NOOP
#  else
#    define RAND_LOCK    NOOP
#    define RAND_UNLOCK  NOOP
#  endif
#endif

#ifndef RANDOM_R_LOCK

   /* random_r() has races with other threads concurrently executing any of:
    *            itself, initstate_r(), setstate_r(), or srandom_r(). */
#  define RANDOM_R_LOCK    GENw_LOCK_
#  define RANDOM_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef RCMD_LOCK
#  define RCMD_LOCK                              \
#    error rcmd not suitable for multi-threaded operation
#endif

#ifndef RCMD_AF_LOCK
#  define RCMD_AF_LOCK                              \
#    error rcmd_af not suitable for multi-threaded operation
#endif

#ifndef READDIR_LOCK
#  define READDIR_LOCK    GENw_LOCK_
#  define READDIR_UNLOCK  GENw_UNLOCK_
#endif

#ifndef RE_COMP_LOCK

   /* re_comp() Obsolete; use regcomp() instead */
#  define RE_COMP_LOCK                              \
#    error re_comp not suitable for multi-threaded operation
#endif

#ifndef RE_EXEC_LOCK

   /* re_exec() Obsolete; use regexec() instead */
#  define RE_EXEC_LOCK                              \
#    error re_exec not suitable for multi-threaded operation
#endif

#ifndef REGCOMP_LOCK
#  define REGCOMP_LOCK    LCr_LOCK_(LC_ALLb_)
#  define REGCOMP_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef REGERROR_LOCK
#  define REGERROR_LOCK    ENVr_LOCK_
#  define REGERROR_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef REGEXEC_LOCK
#  define REGEXEC_LOCK    LCr_LOCK_(LC_ALLb_)
#  define REGEXEC_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef RES_NCLOSE_LOCK
#  define RES_NCLOSE_LOCK    LCr_LOCK_(LC_ALLb_)
#  define RES_NCLOSE_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef RES_NINIT_LOCK
#  define RES_NINIT_LOCK    LCr_LOCK_(LC_ALLb_)
#  define RES_NINIT_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef RES_NQUERY_LOCK
#  define RES_NQUERY_LOCK    LCr_LOCK_(LC_ALLb_)
#  define RES_NQUERY_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef RES_NQUERYDOMAIN_LOCK
#  define RES_NQUERYDOMAIN_LOCK    LCr_LOCK_(LC_ALLb_)
#  define RES_NQUERYDOMAIN_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef RES_NSEARCH_LOCK
#  define RES_NSEARCH_LOCK    LCr_LOCK_(LC_ALLb_)
#  define RES_NSEARCH_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef RES_NSEND_LOCK
#  define RES_NSEND_LOCK    LCr_LOCK_(LC_ALLb_)
#  define RES_NSEND_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef REXEC_LOCK

   /* rexec() Obsolete; use rcmd() instead */
#  define REXEC_LOCK                              \
#    error rexec not suitable for multi-threaded operation
#endif

#ifndef REXEC_AF_LOCK

   /* rexec_af() Obsolete; use rcmd() instead */
#  define REXEC_AF_LOCK                              \
#    error rexec_af not suitable for multi-threaded operation
#endif

#ifndef RPMATCH_LOCK
#  define RPMATCH_LOCK    LCr_LOCK_(LC_MESSAGESb_)
#  define RPMATCH_UNLOCK  LCr_UNLOCK_(LC_MESSAGESb_)
#endif

#ifndef RUSEROK_LOCK
#  define RUSEROK_LOCK    LCr_LOCK_(LC_ALLb_)
#  define RUSEROK_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef RUSEROK_AF_LOCK
#  define RUSEROK_AF_LOCK    LCr_LOCK_(LC_ALLb_)
#  define RUSEROK_AF_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef SCANDIR_LOCK
#  define SCANDIR_LOCK    NOOP
#  define SCANDIR_UNLOCK  NOOP
#endif

#ifndef SCANF_LOCK
#  define SCANF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define SCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef SECURE_GETENV_LOCK
#  ifdef GETENV_PRESERVES_OTHER_THREAD
#    define SECURE_GETENV_LOCK    ENVr_LOCK_
#    define SECURE_GETENV_UNLOCK  ENVr_UNLOCK_
#  else
#    define SECURE_GETENV_LOCK    GENw_ENVr_LOCK_
#    define SECURE_GETENV_UNLOCK  GENw_ENVr_UNLOCK_
#  endif
#endif

#ifndef SEED48_LOCK

   /* seed48() has races with other threads concurrently executing any of:
    *          itself, drand48(), erand48(), jrand48(), lcong48(), lrand48(),
    *          mrand48(), nrand48(), or srand48(). */
#  define SEED48_LOCK    GENw_LOCK_
#  define SEED48_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SEED48_R_LOCK

   /* seed48_r() has races with other threads concurrently executing any of:
    *            itself, drand48_r(), erand48_r(), jrand48_r(), lcong48_r(),
    *            lrand48_r(), mrand48_r(), nrand48_r(), or srand48_r(). */
#  define SEED48_R_LOCK    GENw_LOCK_
#  define SEED48_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SETALIASENT_LOCK
#  define SETALIASENT_LOCK    LCr_LOCK_(LC_ALLb_)
#  define SETALIASENT_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef SETCONTEXT_LOCK

   /* setcontext() has races with other threads concurrently executing any of:
    *              itself, getcontext(), makecontext(), or swapcontext(). */
#  define SETCONTEXT_LOCK    GENw_LOCK_
#  define SETCONTEXT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SETENV_LOCK
#  define SETENV_LOCK    ENVw_LOCK_
#  define SETENV_UNLOCK  ENVw_UNLOCK_
#endif

#ifndef SETFSENT_LOCK

   /* setfsent() has races with other threads concurrently executing any of:
    *            itself, endfsent(), getfsent(), getfsfile(), or getfsspec().
    */
#  define SETFSENT_LOCK    GENw_LOCK_
#  define SETFSENT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SETGRENT_LOCK

   /* setgrent() has races with other threads concurrently executing any of:
    *            itself, endgrent(), getgrent(), or getgrent_r(). */
#  define SETGRENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define SETGRENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef SETHOSTENT_LOCK

   /* sethostent() has races with other threads concurrently executing any of:
    *              itself, endhostent(), gethostent(), or gethostent_r(). */
#  define SETHOSTENT_LOCK    GENw_ENVr_LCr_LOCK_(LC_ALLb_)
#  define SETHOSTENT_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef SETHOSTID_LOCK
#  define SETHOSTID_LOCK    GENw_LOCK_
#  define SETHOSTID_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SETKEY_LOCK

   /* setkey() has races with other threads concurrently executing any of:
    *          itself, crypt(), or encrypt(). */
#  define SETKEY_LOCK    GENw_LOCK_
#  define SETKEY_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SETLOCALE_LOCK
#  ifndef WIN32
#    define SETLOCALE_LOCK    ENVr_LCw_LOCK_(LC_ALLb_)
#    define SETLOCALE_UNLOCK  ENVr_LCw_UNLOCK_(LC_ALLb_)
#  else
#    define SETLOCALE_LOCK    NOOP
#    define SETLOCALE_UNLOCK  NOOP
#  endif
#endif

#ifndef SETLOGMASK_LOCK
#  define SETLOGMASK_LOCK    GENw_LOCK_
#  define SETLOGMASK_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SETNETENT_LOCK

   /* setnetent() has races with other threads concurrently executing any of:
    *             itself, endnetent(), or getnetent(). */
#  define SETNETENT_LOCK    GENw_ENVr_LCr_LOCK_(LC_ALLb_)
#  define SETNETENT_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef SETNETGRENT_LOCK

   /* setnetgrent() has races with other threads concurrently executing any
    *               of: itself, endnetgrent(), getnetgrent(), getnetgrent_r(),
    *               or innetgr(). */
#  define SETNETGRENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define SETNETGRENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef SETPROTOENT_LOCK

   /* setprotoent() has races with other threads concurrently executing any
    *               of: itself, endprotoent(), or getprotoent(). */
#  define SETPROTOENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define SETPROTOENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef SETPWENT_LOCK

   /* setpwent() has races with other threads concurrently executing any of:
    *            itself, endpwent(), getpwent(), or getpwent_r(). */
#  define SETPWENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define SETPWENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef SETRPCENT_LOCK
#  define SETRPCENT_LOCK    LCr_LOCK_(LC_ALLb_)
#  define SETRPCENT_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef SETSERVENT_LOCK

   /* setservent() has races with other threads concurrently executing any of:
    *              itself, endservent(), or getservent(). */
#  define SETSERVENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define SETSERVENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef SETSPENT_LOCK

   /* setspent() has races with other threads concurrently executing any of:
    *            itself, endspent(), getspent(), or getspent_r(). */
#  define SETSPENT_LOCK    GENw_LCr_LOCK_(LC_ALLb_)
#  define SETSPENT_UNLOCK  GENw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef SETSTATE_R_LOCK

   /* setstate_r() has races with other threads concurrently executing any of:
    *              itself, initstate_r(), random_r(), or srandom_r(). */
#  define SETSTATE_R_LOCK    GENw_LOCK_
#  define SETSTATE_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SETTTYENT_LOCK

   /* setttyent() has races with other threads concurrently executing any of:
    *             itself, endttyent(), getttyent(), or getttynam(). */
#  define SETTTYENT_LOCK    GENw_LOCK_
#  define SETTTYENT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SETUSERSHELL_LOCK
#  define SETUSERSHELL_LOCK                              \
#    error setusershell not suitable for multi-threaded operation
#endif

#ifndef SETUTENT_LOCK

   /* setutent() Obsolete; use setutxent() instead
    * setutent() has races with other threads concurrently executing any of:
    *            itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *            getutent(), getutid(), getutline(), getutxent(), getutxid(),
    *            getutxline(), glob(), login(), logout(), pututline(),
    *            pututxline(), setutxent(), utmpname(), or wordexp(). */
#  define SETUTENT_LOCK    GENw_LOCK_
#  define SETUTENT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SETUTXENT_LOCK

   /* setutxent() has races with other threads concurrently executing any of:
    *             itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *             getutent(), getutid(), getutline(), getutxent(), getutxid(),
    *             getutxline(), glob(), login(), logout(), pututline(),
    *             pututxline(), setutent(), utmpname(), or wordexp(). */
#  define SETUTXENT_LOCK    GENw_LOCK_
#  define SETUTXENT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SGETSPENT_LOCK
#  define SGETSPENT_LOCK    GENw_LOCK_
#  define SGETSPENT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SGETSPENT_R_LOCK
#  define SGETSPENT_R_LOCK    LCr_LOCK_(LC_ALLb_)
#  define SGETSPENT_R_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef SHM_OPEN_LOCK
#  define SHM_OPEN_LOCK    LCr_LOCK_(LC_ALLb_)
#  define SHM_OPEN_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef SHM_UNLINK_LOCK
#  define SHM_UNLINK_LOCK    LCr_LOCK_(LC_ALLb_)
#  define SHM_UNLINK_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef SIGINTERRUPT_LOCK

   /* siginterrupt() Obsolete; use sigaction(2) with the SA_RESTART flag
    *                instead */
#  define SIGINTERRUPT_LOCK    GENw_LOCK_
#  define SIGINTERRUPT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SLEEP_LOCK

   /* sleep() is vulnerable to signal SIGCHLD/linux */
#  define SLEEP_LOCK    NOOP
#  define SLEEP_UNLOCK  NOOP
#endif

#ifndef SNPRINTF_LOCK
#  define SNPRINTF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define SNPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef SPRINTF_LOCK
#  define SPRINTF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define SPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef SRAND48_LOCK

   /* srand48() has races with other threads concurrently executing any of:
    *           itself, drand48(), erand48(), jrand48(), lcong48(), lrand48(),
    *           mrand48(), nrand48(), or seed48(). */
#  define SRAND48_LOCK    GENw_LOCK_
#  define SRAND48_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SRAND48_R_LOCK

   /* srand48_r() has races with other threads concurrently executing any of:
    *             itself, drand48_r(), erand48_r(), jrand48_r(), lcong48_r(),
    *             lrand48_r(), mrand48_r(), nrand48_r(), or seed48_r(). */
#  define SRAND48_R_LOCK    GENw_LOCK_
#  define SRAND48_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SRANDOM_R_LOCK

   /* srandom_r() has races with other threads concurrently executing any of:
    *             itself, initstate_r(), random_r(), or setstate_r(). */
#  define SRANDOM_R_LOCK    GENw_LOCK_
#  define SRANDOM_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SSCANF_LOCK
#  define SSCANF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define SSCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef SSIGNAL_LOCK
#  define SSIGNAL_LOCK    GENr_LOCK_
#  define SSIGNAL_UNLOCK  GENr_UNLOCK_
#endif

#ifndef STRCASECMP_LOCK

   /* strcasecmp() The POSIX Standard says results are undefined unless
    *              LC_CTYPE is the POSIX locale */
#  define STRCASECMP_LOCK    LCr_LOCK_(LC_CTYPEb_|LC_COLLATEb_)
#  define STRCASECMP_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_|LC_COLLATEb_)
#endif

#ifndef STRCASESTR_LOCK
#  define STRCASESTR_LOCK    LCr_LOCK_(LC_ALLb_)
#  define STRCASESTR_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef STRCOLL_LOCK
#  define STRCOLL_LOCK    LCr_LOCK_(LC_COLLATEb_)
#  define STRCOLL_UNLOCK  LCr_UNLOCK_(LC_COLLATEb_)
#endif

#ifndef STRERROR_LOCK
#  define STRERROR_LOCK    GENw_LCr_LOCK_(LC_MESSAGESb_)
#  define STRERROR_UNLOCK  GENw_LCr_UNLOCK_(LC_MESSAGESb_)
#endif

#ifndef STRERROR_L_LOCK
#  define STRERROR_L_LOCK    NOOP
#  define STRERROR_L_UNLOCK  NOOP
#endif

#ifndef STRERROR_R_LOCK
#  define STRERROR_R_LOCK    NOOP
#  define STRERROR_R_UNLOCK  NOOP
#endif

#ifndef STRFMON_LOCK
#  define STRFMON_LOCK    LCr_LOCK_(LC_MONETARYb_)
#  define STRFMON_UNLOCK  LCr_UNLOCK_(LC_MONETARYb_)
#endif

#ifndef STRFMON_L_LOCK
#  define STRFMON_L_LOCK    NOOP
#  define STRFMON_L_UNLOCK  NOOP
#endif

#ifndef STRFROMD_LOCK

   /* strfromd() Asynchronous unsafe */
#  define STRFROMD_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define STRFROMD_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef STRFROMF_LOCK

   /* strfromf() Asynchronous unsafe */
#  define STRFROMF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define STRFROMF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef STRFROML_LOCK

   /* strfroml() Asynchronous unsafe */
#  define STRFROML_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define STRFROML_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef STRFTIME_LOCK

   /* strftime() Use Perl_sv_strftime_tm() or Perl_sv_strftime_ints() instead
    */
#  define STRFTIME_LOCK    GENw_ENVr_LCr_LOCK_(LC_TIMEb_)
#  define STRFTIME_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_TIMEb_)
#endif

#ifndef STRFTIME_L_LOCK
#  define STRFTIME_L_LOCK    NOOP
#  define STRFTIME_L_UNLOCK  NOOP
#endif

#ifndef STRNCASECMP_LOCK

   /* strncasecmp() The POSIX Standard says results are undefined unless
    *               LC_CTYPE is the POSIX locale */
#  define STRNCASECMP_LOCK    LCr_LOCK_(LC_CTYPEb_|LC_COLLATEb_)
#  define STRNCASECMP_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_|LC_COLLATEb_)
#endif

#ifndef STRPTIME_LOCK
#  define STRPTIME_LOCK    ENVr_LCr_LOCK_(LC_TIMEb_)
#  define STRPTIME_UNLOCK  ENVr_LCr_UNLOCK_(LC_TIMEb_)
#endif

#ifndef STRSIGNAL_LOCK
#  define STRSIGNAL_LOCK    GENw_LCr_LOCK_(LC_MESSAGESb_)
#  define STRSIGNAL_UNLOCK  GENw_LCr_UNLOCK_(LC_MESSAGESb_)
#endif

#ifndef STRTOD_LOCK
#  define STRTOD_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define STRTOD_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef STRTOF_LOCK
#  define STRTOF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define STRTOF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef STRTOIMAX_LOCK
#  define STRTOIMAX_LOCK    LCr_LOCK_(LC_ALLb_)
#  define STRTOIMAX_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef STRTOK_LOCK

   /* strtok() To avoid needing to lock, use strtok_r() instead */
#  define STRTOK_LOCK    GENw_LOCK_
#  define STRTOK_UNLOCK  GENw_UNLOCK_
#endif

#ifndef STRTOL_LOCK
#  define STRTOL_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define STRTOL_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef STRTOLD_LOCK
#  define STRTOLD_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define STRTOLD_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef STRTOLL_LOCK
#  define STRTOLL_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define STRTOLL_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef STRTOQ_LOCK
#  define STRTOQ_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define STRTOQ_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef STRTOUL_LOCK
#  define STRTOUL_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define STRTOUL_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef STRTOULL_LOCK
#  define STRTOULL_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define STRTOULL_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef STRTOUMAX_LOCK
#  define STRTOUMAX_LOCK    LCr_LOCK_(LC_ALLb_)
#  define STRTOUMAX_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef STRTOUQ_LOCK
#  define STRTOUQ_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define STRTOUQ_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef STRVERSCMP_LOCK
#  define STRVERSCMP_LOCK    NOOP
#  define STRVERSCMP_UNLOCK  NOOP
#endif

#ifndef STRXFRM_LOCK
#  define STRXFRM_LOCK    LCr_LOCK_(LC_COLLATEb_|LC_CTYPEb_)
#  define STRXFRM_UNLOCK  LCr_UNLOCK_(LC_COLLATEb_|LC_CTYPEb_)
#endif

#ifndef SWAPCONTEXT_LOCK

   /* swapcontext() has races with other threads concurrently executing any
    *               of: itself, getcontext(), makecontext(), or setcontext().
    */
#  define SWAPCONTEXT_LOCK    GENw_LOCK_
#  define SWAPCONTEXT_UNLOCK  GENw_UNLOCK_
#endif

#ifndef SWPRINTF_LOCK
#  define SWPRINTF_LOCK    LCr_LOCK_(LC_CTYPEb_|LC_NUMERICb_)
#  define SWPRINTF_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_|LC_NUMERICb_)
#endif

#ifndef SWSCANF_LOCK
#  define SWSCANF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define SWSCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef SYSCONF_LOCK
#  define SYSCONF_LOCK    ENVr_LOCK_
#  define SYSCONF_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef SYSLOG_LOCK
#  define SYSLOG_LOCK    ENVr_LCr_LOCK_(LC_ALLb_)
#  define SYSLOG_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef SYSTEM_LOCK
#  ifndef __GLIBC__

     /* system() Some implementations are not-thread safe; See POSIX Standard
      */
#    define SYSTEM_LOCK    NOOP
#    define SYSTEM_UNLOCK  NOOP
#  else
#    define SYSTEM_LOCK    NOOP
#    define SYSTEM_UNLOCK  NOOP
#  endif
#endif

#ifndef TDELETE_LOCK

   /* tdelete() has races with other threads concurrently executing any of:
    *           itself, tfind(), or tsearch(). */
#  define TDELETE_LOCK    GENw_LOCK_
#  define TDELETE_UNLOCK  GENw_UNLOCK_
#endif

#ifndef TEMPNAM_LOCK

   /* tempnam() Obsolete; use mkstemp() or tmpfile() instead */
#  define TEMPNAM_LOCK    ENVr_LOCK_
#  define TEMPNAM_UNLOCK  ENVr_UNLOCK_
#endif

#ifndef TFIND_LOCK

   /* tfind() has races with other threads concurrently executing any of:
    *         itself, tdelete(), or tsearch(). */
#  define TFIND_LOCK    GENw_LOCK_
#  define TFIND_UNLOCK  GENw_UNLOCK_
#endif

#ifndef TIMEGM_LOCK
#  define TIMEGM_LOCK    ENVr_LCr_LOCK_(LC_ALLb_)
#  define TIMEGM_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef TIMELOCAL_LOCK
#  define TIMELOCAL_LOCK    ENVr_LCr_LOCK_(LC_ALLb_)
#  define TIMELOCAL_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef TMPNAM_LOCK

   /* tmpnam() Obsolete; use mkstemp() or tmpfile() instead
    * tmpnam() macros only valid if !s */
#  define TMPNAM_LOCK    NOOP
#  define TMPNAM_UNLOCK  NOOP
#endif

#ifndef TOLOWER_LOCK

   /* tolower() Use one of the Perl toUPPER family of macros instead */
#  define TOLOWER_LOCK    NOOP
#  define TOLOWER_UNLOCK  NOOP
#endif

#ifndef TOLOWER_L_LOCK

   /* tolower_l() Use one of the Perl toUPPER family of macros instead */
#  define TOLOWER_L_LOCK    NOOP
#  define TOLOWER_L_UNLOCK  NOOP
#endif

#ifndef TOUPPER_LOCK

   /* toupper() Use one of the Perl toUPPER family of macros instead */
#  define TOUPPER_LOCK    NOOP
#  define TOUPPER_UNLOCK  NOOP
#endif

#ifndef TOUPPER_L_LOCK

   /* toupper_l() Use one of the Perl toUPPER family of macros instead */
#  define TOUPPER_L_LOCK    NOOP
#  define TOUPPER_L_UNLOCK  NOOP
#endif

#ifndef TOWCTRANS_LOCK
#  define TOWCTRANS_LOCK    NOOP
#  define TOWCTRANS_UNLOCK  NOOP
#endif

#ifndef TOWLOWER_LOCK

   /* towlower() Use one of the Perl toLOWER family of macros */
#  define TOWLOWER_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define TOWLOWER_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef TOWLOWER_L_LOCK
#  define TOWLOWER_L_LOCK    NOOP
#  define TOWLOWER_L_UNLOCK  NOOP
#endif

#ifndef TOWUPPER_LOCK

   /* towupper() Use one of the Perl toLOWER family of macros */
#  define TOWUPPER_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define TOWUPPER_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef TOWUPPER_L_LOCK
#  define TOWUPPER_L_LOCK    NOOP
#  define TOWUPPER_L_UNLOCK  NOOP
#endif

#ifndef TSEARCH_LOCK

   /* tsearch() has races with other threads concurrently executing any of:
    *           itself, tdelete(), or tfind(). */
#  define TSEARCH_LOCK    GENw_LOCK_
#  define TSEARCH_UNLOCK  GENw_UNLOCK_
#endif

#ifndef TTYNAME_LOCK

   /* ttyname() Use ttyname_r() instead
    * ttyname() has races with other threads concurrently executing either
    *           itself or login_tty. */
#  define TTYNAME_LOCK    GENw_LOCK_
#  define TTYNAME_UNLOCK  GENw_UNLOCK_
#endif

#ifndef TTYSLOT_LOCK
#  define TTYSLOT_LOCK                              \
#    error ttyslot not suitable for multi-threaded operation
#endif

#ifndef TWALK_LOCK

   /* twalk() has races with other threads concurrently executing either
    *         itself or twalk_r. */
#  define TWALK_LOCK    GENw_LOCK_
#  define TWALK_UNLOCK  GENw_UNLOCK_
#endif

#ifndef TWALK_R_LOCK

   /* twalk_r() GNU extension
    * twalk_r() has races with other threads concurrently executing either
    *           itself or twalk. */
#  define TWALK_R_LOCK    GENw_LOCK_
#  define TWALK_R_UNLOCK  GENw_UNLOCK_
#endif

#ifndef TZSET_LOCK
#  define TZSET_LOCK    GENw_ENVr_LCr_LOCK_(LC_ALLb_)
#  define TZSET_UNLOCK  GENw_ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef UNGETWC_LOCK
#  define UNGETWC_LOCK    NOOP
#  define UNGETWC_UNLOCK  NOOP
#endif

#ifndef UNSETENV_LOCK
#  define UNSETENV_LOCK    ENVw_LOCK_
#  define UNSETENV_UNLOCK  ENVw_UNLOCK_
#endif

#ifndef UPDWTMP_LOCK

   /* updwtmp() Not in POSIX Standard
    * updwtmp() is vulnerable to signal ALRM */
#  define UPDWTMP_LOCK    NOOP
#  define UPDWTMP_UNLOCK  NOOP
#endif

#ifndef UTMPNAME_LOCK

   /* utmpname() has races with other threads concurrently executing any of:
    *            itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *            getutent(), getutid(), getutline(), getutxent(), getutxid(),
    *            getutxline(), glob(), login(), logout(), pututline(),
    *            pututxline(), setutent(), setutxent(), or wordexp(). */
#  define UTMPNAME_LOCK    GENw_LOCK_
#  define UTMPNAME_UNLOCK  GENw_UNLOCK_
#endif

#ifndef VA_ARG_LOCK

   /* va_arg() macros only valid if arg-ap-is-locale-to-its-thread */
#  define VA_ARG_LOCK    NOOP
#  define VA_ARG_UNLOCK  NOOP
#endif

#ifndef VALLOC_LOCK

   /* valloc() must be called at least once in single-threaded mode to enable
    *          thread-safety in subsequent calls when in multi-threaded mode.
    */
#  define VALLOC_LOCK    NOOP
#  define VALLOC_UNLOCK  NOOP
#endif

#ifndef VASPRINTF_LOCK
#  define VASPRINTF_LOCK    LCr_LOCK_(LC_ALLb_)
#  define VASPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef VDPRINTF_LOCK
#  define VDPRINTF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define VDPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef VERR_LOCK
#  define VERR_LOCK    LCr_LOCK_(LC_ALLb_)
#  define VERR_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef VERRX_LOCK
#  define VERRX_LOCK    LCr_LOCK_(LC_ALLb_)
#  define VERRX_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef VERSIONSORT_LOCK
#  define VERSIONSORT_LOCK    LCr_LOCK_(LC_ALLb_)
#  define VERSIONSORT_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef VFPRINTF_LOCK
#  define VFPRINTF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define VFPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef VFSCANF_LOCK
#  define VFSCANF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define VFSCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef VFWPRINTF_LOCK
#  define VFWPRINTF_LOCK    LCr_LOCK_(LC_CTYPEb_|LC_NUMERICb_)
#  define VFWPRINTF_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_|LC_NUMERICb_)
#endif

#ifndef VPRINTF_LOCK
#  define VPRINTF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define VPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef VSCANF_LOCK
#  define VSCANF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define VSCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef VSNPRINTF_LOCK
#  define VSNPRINTF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define VSNPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef VSPRINTF_LOCK
#  define VSPRINTF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define VSPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef VSSCANF_LOCK
#  define VSSCANF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define VSSCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef VSWPRINTF_LOCK
#  define VSWPRINTF_LOCK    LCr_LOCK_(LC_CTYPEb_|LC_NUMERICb_)
#  define VSWPRINTF_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_|LC_NUMERICb_)
#endif

#ifndef VSYSLOG_LOCK
#  define VSYSLOG_LOCK    ENVr_LCr_LOCK_(LC_ALLb_)
#  define VSYSLOG_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef VWARN_LOCK
#  define VWARN_LOCK    LCr_LOCK_(LC_ALLb_)
#  define VWARN_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef VWARNX_LOCK
#  define VWARNX_LOCK    LCr_LOCK_(LC_ALLb_)
#  define VWARNX_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef VWPRINTF_LOCK
#  define VWPRINTF_LOCK    LCr_LOCK_(LC_CTYPEb_|LC_NUMERICb_)
#  define VWPRINTF_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_|LC_NUMERICb_)
#endif

#ifndef WARN_LOCK
#  define WARN_LOCK    LCr_LOCK_(LC_ALLb_)
#  define WARN_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef WARNX_LOCK
#  define WARNX_LOCK    LCr_LOCK_(LC_ALLb_)
#  define WARNX_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef WCRTOMB_LOCK

   /* wcrtomb() macros only valid if !ps */
#  define WCRTOMB_LOCK    NOOP
#  define WCRTOMB_UNLOCK  NOOP
#endif

#ifndef WCSCASECMP_LOCK

   /* wcscasecmp() Not in POSIX; not widely implemented */
#  define WCSCASECMP_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define WCSCASECMP_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef WCSCHR_LOCK
#  define WCSCHR_LOCK    NOOP
#  define WCSCHR_UNLOCK  NOOP
#endif

#ifndef WCSCOLL_LOCK
#  define WCSCOLL_LOCK    LCr_LOCK_(LC_COLLATEb_)
#  define WCSCOLL_UNLOCK  LCr_UNLOCK_(LC_COLLATEb_)
#endif

#ifndef WCSFTIME_LOCK
#  define WCSFTIME_LOCK    NOOP
#  define WCSFTIME_UNLOCK  NOOP
#endif

#ifndef WCSNCASECMP_LOCK

   /* wcsncasecmp() Not in POSIX; not widely implemented */
#  define WCSNCASECMP_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define WCSNCASECMP_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef WCSNRTOMBS_LOCK

   /* wcsnrtombs() macros only valid if !ps */
#  define WCSNRTOMBS_LOCK    NOOP
#  define WCSNRTOMBS_UNLOCK  NOOP
#endif

#ifndef WCSRCHR_LOCK
#  define WCSRCHR_LOCK    NOOP
#  define WCSRCHR_UNLOCK  NOOP
#endif

#ifndef WCSRTOMBS_LOCK

   /* wcsrtombs() macros only valid if !ps */
#  define WCSRTOMBS_LOCK    NOOP
#  define WCSRTOMBS_UNLOCK  NOOP
#endif

#ifndef WCSTOD_LOCK
#  define WCSTOD_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define WCSTOD_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef WCSTOF_LOCK
#  define WCSTOF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define WCSTOF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef WCSTOIMAX_LOCK
#  define WCSTOIMAX_LOCK    LCr_LOCK_(LC_ALLb_)
#  define WCSTOIMAX_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef WCSTOLD_LOCK
#  define WCSTOLD_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define WCSTOLD_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

#ifndef WCSTOMBS_LOCK
#  define WCSTOMBS_LOCK    NOOP
#  define WCSTOMBS_UNLOCK  NOOP
#endif

#ifndef WCSTOUMAX_LOCK
#  define WCSTOUMAX_LOCK    LCr_LOCK_(LC_ALLb_)
#  define WCSTOUMAX_UNLOCK  LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef WCSWIDTH_LOCK
#  define WCSWIDTH_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define WCSWIDTH_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef WCSXFRM_LOCK
#  define WCSXFRM_LOCK    LCr_LOCK_(LC_COLLATEb_|LC_CTYPEb_)
#  define WCSXFRM_UNLOCK  LCr_UNLOCK_(LC_COLLATEb_|LC_CTYPEb_)
#endif

#ifndef WCTOB_LOCK

   /* wctob() Use wcrtomb() instead */
#  define WCTOB_LOCK    NOOP
#  define WCTOB_UNLOCK  NOOP
#endif

#ifndef WCTOMB_LOCK
#  define WCTOMB_LOCK    GENw_LCr_LOCK_(LC_CTYPEb_)
#  define WCTOMB_UNLOCK  GENw_LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef WCTRANS_LOCK
#  define WCTRANS_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define WCTRANS_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef WCTYPE_LOCK
#  define WCTYPE_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define WCTYPE_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef WCWIDTH_LOCK
#  define WCWIDTH_LOCK    LCr_LOCK_(LC_CTYPEb_)
#  define WCWIDTH_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_)
#endif

#ifndef WORDEXP_LOCK

   /* wordexp() is vulnerable to signal ALRM
    * wordexp() has races with other threads concurrently executing any of:
    *           itself, endutent(), endutxent(), getlogin(), getlogin_r(),
    *           getutent(), getutid(), getutline(), getutxent(), getutxid(),
    *           getutxline(), glob(), login(), logout(), pututline(),
    *           pututxline(), setutent(), setutxent(), or utmpname(). */
#  define WORDEXP_LOCK    ENVw_LCr_LOCK_(LC_ALLb_)
#  define WORDEXP_UNLOCK  ENVw_LCr_UNLOCK_(LC_ALLb_)
#endif

#ifndef WPRINTF_LOCK
#  define WPRINTF_LOCK    LCr_LOCK_(LC_CTYPEb_|LC_NUMERICb_)
#  define WPRINTF_UNLOCK  LCr_UNLOCK_(LC_CTYPEb_|LC_NUMERICb_)
#endif

#ifndef WSCANF_LOCK
#  define WSCANF_LOCK    LCr_LOCK_(LC_NUMERICb_)
#  define WSCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERICb_)
#endif

/* ex: set ro ft=c: */
